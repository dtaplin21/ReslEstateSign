{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        spin: {\n          from: {\n            transform: \"rotate(0deg)\",\n          },\n          to: {\n            transform: \"rotate(360deg)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-in-out\",\n        \"spin\": \"spin 1s linear infinite\",\n      },\n      boxShadow: {\n        \"professional\": \"0 4px 6px -1px hsl(221.2 83.2% 53.3% / 0.1), 0 2px 4px -1px hsl(221.2 83.2% 53.3% / 0.06)\",\n        \"professional-lg\": \"0 10px 15px -3px hsl(221.2 83.2% 53.3% / 0.1), 0 4px 6px -2px hsl(221.2 83.2% 53.3% / 0.05)\",\n      },\n      backgroundImage: {\n        \"real-estate-gradient\": \"linear-gradient(135deg, hsl(221.2, 83.2%, 53.3%) 0%, hsl(221.2, 83.2%, 45%) 50%, hsl(221.2, 83.2%, 40%) 100%)\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n  ],\n} satisfies Config;\n","size_bytes":3695},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql);\n","size_bytes":279},"server/docusign.ts":{"content":"// Mock DocuSign integration for MVP\n// In production, this would use the actual DocuSign SDK\n\nexport interface DocuSignEnvelope {\n  envelopeId: string;\n  status: string;\n  emailSubject: string;\n  emailBlurb: string;\n  documents: Array<{\n    documentId: string;\n    name: string;\n    fileExtension: string;\n  }>;\n  recipients: Array<{\n    recipientId: string;\n    name: string;\n    email: string;\n    roleName: string;\n    routingOrder: number;\n  }>;\n}\n\nexport interface DocuSignSigner {\n  name: string;\n  email: string;\n  role: string;\n  routingOrder: number;\n}\n\nexport interface CreateEnvelopeRequest {\n  documentName: string;\n  documentContent: Buffer | string;\n  emailSubject: string;\n  emailMessage: string;\n  signers: DocuSignSigner[];\n}\n\nexport class DocuSignService {\n  private baseUrl: string;\n  private accountId: string;\n\n  constructor() {\n    // In production, these would come from environment variables\n    this.baseUrl = process.env.DOCUSIGN_BASE_URL || \"https://demo.docusign.net/restapi\";\n    this.accountId = process.env.DOCUSIGN_ACCOUNT_ID || \"mock-account-id\";\n  }\n\n  async createEnvelope(request: CreateEnvelopeRequest): Promise<DocuSignEnvelope> {\n    try {\n      // Mock implementation for MVP\n      // In production, this would use the actual DocuSign API\n      \n      const mockEnvelopeId = `envelope_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const envelope: DocuSignEnvelope = {\n        envelopeId: mockEnvelopeId,\n        status: \"sent\",\n        emailSubject: request.emailSubject,\n        emailBlurb: request.emailMessage,\n        documents: [\n          {\n            documentId: \"1\",\n            name: request.documentName,\n            fileExtension: \"pdf\",\n          },\n        ],\n        recipients: request.signers.map((signer, index) => ({\n          recipientId: `recipient_${index + 1}`,\n          name: signer.name,\n          email: signer.email,\n          roleName: signer.role,\n          routingOrder: signer.routingOrder,\n        })),\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      console.log(`Mock DocuSign envelope created: ${mockEnvelopeId}`);\n      return envelope;\n      \n    } catch (error) {\n      console.error(\"Error creating DocuSign envelope:\", error);\n      throw new Error(\"Failed to create DocuSign envelope: \" + (error as Error).message);\n    }\n  }\n\n  async getEnvelopeStatus(envelopeId: string): Promise<{ status: string; recipients: Array<{ email: string; status: string; signedDateTime?: string }> }> {\n    try {\n      // Mock implementation\n      const statuses = [\"sent\", \"delivered\", \"completed\"];\n      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];\n      \n      return {\n        status: randomStatus,\n        recipients: [\n          {\n            email: \"recipient@example.com\",\n            status: randomStatus === \"completed\" ? \"completed\" : \"sent\",\n            signedDateTime: randomStatus === \"completed\" ? new Date().toISOString() : undefined,\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting envelope status:\", error);\n      throw new Error(\"Failed to get envelope status: \" + (error as Error).message);\n    }\n  }\n\n  async sendReminder(envelopeId: string, recipientEmail: string): Promise<void> {\n    try {\n      // Mock implementation\n      console.log(`Mock reminder sent for envelope ${envelopeId} to ${recipientEmail}`);\n      await new Promise(resolve => setTimeout(resolve, 500));\n    } catch (error) {\n      console.error(\"Error sending reminder:\", error);\n      throw new Error(\"Failed to send reminder: \" + (error as Error).message);\n    }\n  }\n}\n\nexport const docusignService = new DocuSignService();\n","size_bytes":3739},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface DocumentParsingResult {\n  documentType: string;\n  propertyAddress: string;\n  propertyValue: number | null;\n  signers: Array<{\n    name: string;\n    email: string;\n    role: string;\n  }>;\n  signatureFields: Array<{\n    signerName: string;\n    fieldType: string;\n    page: number;\n    coordinates: { x: number; y: number };\n  }>;\n  keyTerms: {\n    closingDate?: string;\n    purchasePrice?: number;\n    earnestMoney?: number;\n    listingPrice?: number;\n    commissionRate?: number;\n    [key: string]: any;\n  };\n  confidence: number;\n}\n\nexport async function parseRealEstateDocument(documentText: string, filename: string): Promise<DocumentParsingResult> {\n  try {\n    const prompt = `You are an expert real estate document analyzer. Parse the following document and extract key information. The document is named \"${filename}\".\n\nAnalyze this real estate document and return a JSON object with the following structure:\n{\n  \"documentType\": \"one of: purchase_agreement, listing_agreement, disclosure, addendum, contract, other\",\n  \"propertyAddress\": \"full property address if found\",\n  \"propertyValue\": \"numeric value of property price/value or null\",\n  \"signers\": [\n    {\n      \"name\": \"full name of signer\",\n      \"email\": \"email if found or empty string\",\n      \"role\": \"one of: buyer, seller, agent, witness, other\"\n    }\n  ],\n  \"signatureFields\": [\n    {\n      \"signerName\": \"name of person who should sign\",\n      \"fieldType\": \"one of: signature, initial, date, checkbox\",\n      \"page\": 1,\n      \"coordinates\": {\"x\": 100, \"y\": 200}\n    }\n  ],\n  \"keyTerms\": {\n    \"closingDate\": \"date string or null\",\n    \"purchasePrice\": \"numeric value or null\",\n    \"earnestMoney\": \"numeric value or null\",\n    \"listingPrice\": \"numeric value or null\",\n    \"commissionRate\": \"percentage as decimal or null\"\n  },\n  \"confidence\": \"confidence score from 0.0 to 1.0\"\n}\n\nDocument content:\n${documentText}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert real estate document analyzer. Always respond with valid JSON only.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Validate and set defaults\n    return {\n      documentType: result.documentType || \"other\",\n      propertyAddress: result.propertyAddress || \"\",\n      propertyValue: result.propertyValue ? Number(result.propertyValue) : null,\n      signers: result.signers || [],\n      signatureFields: result.signatureFields || [],\n      keyTerms: result.keyTerms || {},\n      confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),\n    };\n  } catch (error) {\n    console.error(\"Error parsing document with AI:\", error);\n    throw new Error(\"Failed to parse document with AI: \" + (error as Error).message);\n  }\n}\n\nexport async function recordAIUsage(userId: string): Promise<void> {\n  // Record AI usage for billing purposes\n  const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n  \n  // This would be called by the storage layer to track usage\n  // The actual recording is handled in the storage implementation\n}\n","size_bytes":3602},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport Stripe from \"stripe\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { db } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { documents, emailNotifications } from \"@shared/schema\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport { parseRealEstateDocument } from \"./openai\";\nimport { docusignService } from \"./docusign\";\nimport { sendDocumentNotification, sendDocumentCompletedNotification, sendUsageAlertNotification, sendDocumentFailedNotification, sendDocumentProcessingNotification, sendSigningReminderNotification } from \"./sendgrid\";\nimport { insertRecipientSchema, insertDocumentSchema, insertDocumentRecipientSchema } from \"@shared/schema\";\n\n// Initialize Stripe\nconst stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2024-06-20\",\n}) : null;\n\n// Function to check and send usage alerts\nasync function checkAndSendUsageAlerts(userId: string): Promise<void> {\n  try {\n    const alerts = await storage.getUsageThresholdAlerts(userId);\n    \n    if (alerts.length > 0) {\n      // Get user info for email\n      const user = await storage.getUser(userId);\n      if (!user || !user.email) return;\n      \n      // Send alerts for each threshold crossed\n      for (const alert of alerts) {\n        await sendUsageAlertNotification(\n          user.email,\n          user.firstName || 'User',\n          alert.recordType,\n          alert.current,\n          alert.limit,\n          alert.percentage\n        );\n      }\n    }\n  } catch (error) {\n    console.error(\"Error checking usage alerts:\", error);\n  }\n}\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 25 * 1024 * 1024, // 25MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF files are allowed'));\n    }\n  },\n});\n\n// Helper function to save uploaded file\nasync function saveUploadedFile(fileBuffer: Buffer, originalName: string, userId: string): Promise<{ filePath: string; fileUrl: string }> {\n  const uploadsDir = path.join(process.cwd(), 'uploads', userId);\n  await fs.mkdir(uploadsDir, { recursive: true });\n  \n  const timestamp = Date.now();\n  const sanitizedName = originalName.replace(/[^a-zA-Z0-9.-]/g, '_');\n  const fileName = `${timestamp}_${sanitizedName}`;\n  const filePath = path.join(uploadsDir, fileName);\n  \n  await fs.writeFile(filePath, fileBuffer);\n  \n  return {\n    filePath: filePath,\n    fileUrl: `/uploads/${userId}/${fileName}`\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n  \n  // Serve uploaded files\n  app.use('/uploads', isAuthenticated, async (req: any, res, next) => {\n    try {\n      const userId = req.user.claims.sub;\n      const requestedPath = req.path;\n      const requestedUserId = requestedPath.split('/')[1];\n      \n      // Only allow users to access their own files\n      if (userId !== requestedUserId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Sanitize and normalize the path\n      const relativePath = req.path.replace(/^\\/+/, ''); // Remove leading slashes\n      const absolutePath = path.join(process.cwd(), 'uploads', relativePath);\n      const basePath = path.join(process.cwd(), 'uploads', requestedUserId);\n      \n      // Ensure the resolved path is within the user's directory\n      if (!absolutePath.startsWith(basePath + path.sep) && absolutePath !== basePath) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Attach the safe path to the request\n      (req as any).safePath = absolutePath;\n      next();\n    } catch (error) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n  }, (req: any, res) => {\n    // Serve static files using the safe path\n    res.sendFile((req as any).safePath, (err) => {\n      if (err) {\n        res.status(404).json({ message: \"File not found\" });\n      }\n    });\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard data\n  app.get('/api/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const currentMonth = new Date().toISOString().slice(0, 7);\n      \n      const [documents, usage] = await Promise.all([\n        storage.getDocuments(userId),\n        storage.getUsageForMonth(userId, currentMonth)\n      ]);\n\n      const stats = {\n        totalDocuments: documents.length,\n        pendingSignatures: documents.filter(doc => doc.status === 'pending').length,\n        completed: documents.filter(doc => doc.status === 'completed').length,\n        avgCompletion: 2.3, // Mock average completion time in days\n      };\n\n      const recentDocuments = documents.slice(0, 5);\n\n      res.json({\n        stats,\n        usage,\n        recentDocuments,\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Recipients routes\n  app.get('/api/recipients', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const recipients = await storage.getRecipients(userId);\n      res.json(recipients);\n    } catch (error) {\n      console.error(\"Error fetching recipients:\", error);\n      res.status(500).json({ message: \"Failed to fetch recipients\" });\n    }\n  });\n\n  app.post('/api/recipients', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const recipientData = insertRecipientSchema.parse({ ...req.body, userId });\n      const recipient = await storage.createRecipient(recipientData);\n      res.json(recipient);\n    } catch (error) {\n      console.error(\"Error creating recipient:\", error);\n      res.status(400).json({ message: \"Failed to create recipient\" });\n    }\n  });\n\n  app.put('/api/recipients/:id', isAuthenticated, async (req, res) => {\n    try {\n      const recipient = await storage.updateRecipient(req.params.id, req.body);\n      res.json(recipient);\n    } catch (error) {\n      console.error(\"Error updating recipient:\", error);\n      res.status(400).json({ message: \"Failed to update recipient\" });\n    }\n  });\n\n  app.delete('/api/recipients/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteRecipient(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting recipient:\", error);\n      res.status(400).json({ message: \"Failed to delete recipient\" });\n    }\n  });\n\n  // Documents routes\n  app.get('/api/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const documents = await storage.getDocuments(userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.get('/api/documents/:id', isAuthenticated, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error fetching document:\", error);\n      res.status(500).json({ message: \"Failed to fetch document\" });\n    }\n  });\n\n  // Document upload and processing\n  app.post('/api/documents/upload', isAuthenticated, upload.single('document'), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const file = req.file;\n      const { emailSubject, emailMessage, recipients: recipientsData } = req.body;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Check usage limits before processing\n      const canUpload = await storage.canPerformAction(userId, 'upload_document');\n      if (!canUpload.allowed) {\n        return res.status(403).json({ \n          message: canUpload.message || \"Upload limit exceeded\",\n          code: \"USAGE_LIMIT_EXCEEDED\"\n        });\n      }\n\n      // Record document usage\n      const currentMonth = new Date().toISOString().slice(0, 7);\n      await storage.recordUsage({\n        userId,\n        recordType: \"document\",\n        recordMonth: currentMonth,\n        count: 1,\n      });\n\n      // Check for usage threshold alerts after recording usage\n      await checkAndSendUsageAlerts(userId);\n\n      // Save file to disk\n      const { filePath, fileUrl } = await saveUploadedFile(file.buffer, file.originalname, userId);\n\n      // Create document record\n      const documentData = {\n        userId,\n        name: file.originalname.replace('.pdf', ''),\n        filename: file.originalname,\n        fileSize: file.size,\n        filePath: filePath,\n        fileUrl: fileUrl,\n        emailSubject: emailSubject || `Please sign: ${file.originalname}`,\n        emailMessage: emailMessage || '',\n        status: 'processing',\n      };\n\n      const document = await storage.createDocument(documentData);\n      console.log(`Document saved: ${document.id} at ${filePath}`);\n\n      // Send processing status notification to agent\n      if (req.user.claims?.email) {\n        try {\n          await sendDocumentProcessingNotification(\n            req.user.claims.email,\n            req.user.claims?.first_name || 'Agent',\n            document.name,\n            'processing'\n          );\n        } catch (emailError) {\n          console.error(\"Failed to send processing notification:\", emailError);\n        }\n      }\n\n      // Process document with AI in background\n      try {\n        // Extract text from PDF using dynamic import to avoid initialization issues\n        let documentText = '';\n        try {\n          const pdfParse = (await import('pdf-parse')).default;\n          const pdfData = await pdfParse(file.buffer);\n          documentText = pdfData.text;\n          console.log(`Extracted ${documentText.length} characters from PDF: ${file.originalname}`);\n        } catch (pdfError) {\n          console.error(\"PDF parsing error, falling back to basic text extraction:\", pdfError);\n          // Fallback to basic text extraction\n          documentText = file.buffer.toString('utf-8', 0, Math.min(file.buffer.length, 10000));\n        }\n        \n        // Check AI request limits before processing\n        const canUseAI = await storage.canPerformAction(userId, 'ai_request');\n        if (!canUseAI.allowed) {\n          await storage.updateDocument(document.id, { status: 'failed' });\n          return res.status(403).json({ \n            message: canUseAI.message || \"AI request limit exceeded\",\n            code: \"AI_LIMIT_EXCEEDED\"\n          });\n        }\n\n        const aiParsingData = await parseRealEstateDocument(documentText, file.originalname);\n\n        // Record AI usage\n        await storage.recordUsage({\n          userId,\n          recordType: 'ai_request',\n          recordMonth: currentMonth,\n          count: 1,\n        });\n\n        // Check for usage threshold alerts after recording AI usage\n        await checkAndSendUsageAlerts(userId);\n\n        // Update document with AI parsing results\n        await storage.updateDocument(document.id, {\n          aiParsingData,\n          documentType: aiParsingData.documentType,\n          propertyAddress: aiParsingData.propertyAddress,\n          propertyValue: aiParsingData.propertyValue ? String(aiParsingData.propertyValue) : null,\n          status: 'pending',\n        });\n\n        // Send pending status notification to agent\n        if (req.user.claims?.email) {\n          try {\n            await sendDocumentProcessingNotification(\n              req.user.claims.email,\n              req.user.claims?.first_name || 'Agent',\n              document.name,\n              'pending'\n            );\n          } catch (emailError) {\n            console.error(\"Failed to send pending notification:\", emailError);\n          }\n        }\n\n        // Parse recipients data if provided\n        if (recipientsData) {\n          const recipients = JSON.parse(recipientsData);\n          \n          // Fetch existing recipients once and index by email for efficiency\n          const existingRecipients = await storage.getRecipients(userId);\n          const recipientsByEmail = existingRecipients.reduce((acc, r) => {\n            acc[r.email] = r;\n            return acc;\n          }, {} as Record<string, any>);\n          \n          for (let i = 0; i < recipients.length; i++) {\n            const recipient = recipients[i];\n            \n            // Create or find recipient\n            let recipientRecord = recipientsByEmail[recipient.email];\n            \n            if (!recipientRecord) {\n              recipientRecord = await storage.createRecipient({\n                userId,\n                name: recipient.name,\n                email: recipient.email,\n                phone: recipient.phone || '',\n                role: recipient.role,\n              });\n              // Add to cache for potential duplicate emails in the same request\n              recipientsByEmail[recipient.email] = recipientRecord;\n            }\n\n            // Add to document recipients\n            await storage.addDocumentRecipient({\n              documentId: document.id,\n              recipientId: recipientRecord.id,\n              signingOrder: i + 1,\n            });\n          }\n\n          // Create DocuSign envelope\n          try {\n            // Check envelope creation limits\n            const canCreateEnvelope = await storage.canPerformAction(userId, 'create_envelope');\n            if (!canCreateEnvelope.allowed) {\n              await storage.updateDocument(document.id, { status: 'failed' });\n              return res.status(403).json({ \n                message: canCreateEnvelope.message || \"Envelope creation limit exceeded\",\n                code: \"ENVELOPE_LIMIT_EXCEEDED\"\n              });\n            }\n\n            const envelope = await docusignService.createEnvelope({\n              documentName: document.name,\n              documentContent: file.buffer,\n              emailSubject: document.emailSubject || `Please sign: ${document.name}`,\n              emailMessage: document.emailMessage || '',\n              signers: recipients.map((r: any, index: number) => ({\n                name: r.name,\n                email: r.email,\n                role: r.role,\n                routingOrder: index + 1,\n              })),\n            });\n\n            // Record envelope usage after successful creation\n            await storage.recordUsage({\n              userId,\n              recordType: 'envelope',\n              recordMonth: currentMonth,\n              count: 1,\n            });\n\n            // Check for usage threshold alerts after recording envelope usage\n            await checkAndSendUsageAlerts(userId);\n\n            // Update document with envelope ID\n            await storage.updateDocument(document.id, {\n              docusignEnvelopeId: envelope.envelopeId,\n              status: 'pending',\n            });\n\n            // Send notification emails\n            for (const recipient of recipients) {\n              await sendDocumentNotification(\n                recipient.email,\n                recipient.name,\n                document.name,\n                req.user.claims?.first_name || 'Agent',\n                document.emailMessage || undefined\n              );\n            }\n\n          } catch (docusignError) {\n            console.error(\"DocuSign error:\", docusignError);\n            await storage.updateDocument(document.id, { status: 'failed' });\n            \n            // Send failure notification to agent\n            if (req.user.claims?.email) {\n              try {\n                await sendDocumentFailedNotification(\n                  req.user.claims.email,\n                  req.user.claims?.first_name || 'Agent',\n                  document.name,\n                  'Envelope creation failed: ' + (docusignError as Error).message\n                );\n              } catch (emailError) {\n                console.error(\"Failed to send document failure notification:\", emailError);\n              }\n            }\n          }\n        }\n\n      } catch (aiError) {\n        console.error(\"AI parsing error:\", aiError);\n        await storage.updateDocument(document.id, { status: 'failed' });\n        \n        // Send failure notification to agent\n        if (req.user.claims?.email) {\n          try {\n            await sendDocumentFailedNotification(\n              req.user.claims.email,\n              req.user.claims?.first_name || 'Agent',\n              document.name,\n              'AI processing failed: ' + (aiError as Error).message\n            );\n          } catch (emailError) {\n            console.error(\"Failed to send document failure notification:\", emailError);\n          }\n        }\n      }\n\n      res.json({ documentId: document.id, message: \"Document uploaded and processing started\" });\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(500).json({ message: \"Failed to upload document\" });\n    }\n  });\n\n  // Subscription plans\n  app.get('/api/subscription-plans', async (req, res) => {\n    try {\n      const plans = await storage.getSubscriptionPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching subscription plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscription plans\" });\n    }\n  });\n\n  // Stripe subscription routes\n  if (stripe) {\n    app.post('/api/get-or-create-subscription', isAuthenticated, async (req: any, res) => {\n      try {\n        const { planId } = req.body;\n        const userId = req.user.claims.sub;\n        \n        // Validate planId\n        if (!planId || !['starter', 'professional', 'enterprise'].includes(planId)) {\n          return res.status(400).json({ message: \"Invalid plan ID\" });\n        }\n\n        let user = await storage.getUser(userId);\n\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        if (user.stripeSubscriptionId) {\n          const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n          const invoice = subscription.latest_invoice;\n          \n          if (typeof invoice === 'object' && invoice && 'payment_intent' in invoice) {\n            const paymentIntent = invoice.payment_intent;\n            if (typeof paymentIntent === 'object' && paymentIntent && 'client_secret' in paymentIntent) {\n              return res.json({\n                subscriptionId: subscription.id,\n                clientSecret: paymentIntent.client_secret,\n              });\n            }\n          }\n        }\n\n        if (!user.email) {\n          return res.status(400).json({ message: 'No user email on file' });\n        }\n\n        // Create or retrieve customer\n        let customer;\n        if (user.stripeCustomerId) {\n          customer = await stripe.customers.retrieve(user.stripeCustomerId);\n        } else {\n          customer = await stripe.customers.create({\n            email: user.email,\n            name: `${user.firstName || ''} ${user.lastName || ''}`.trim(),\n          });\n        }\n\n        // Map planId to Stripe price IDs (using environment variables or defaults)\n        const priceMapping = {\n          starter: process.env.STRIPE_STARTER_PRICE_ID || 'price_starter_default',\n          professional: process.env.STRIPE_PROFESSIONAL_PRICE_ID || 'price_professional_default', \n          enterprise: process.env.STRIPE_ENTERPRISE_PRICE_ID || 'price_enterprise_default'\n        };\n\n        const priceId = priceMapping[planId as keyof typeof priceMapping];\n\n        console.log(`Creating subscription for user ${userId} with plan ${planId} and price ${priceId}`);\n\n        const subscription = await stripe.subscriptions.create({\n          customer: customer.id,\n          items: [{ price: priceId }],\n          payment_behavior: 'default_incomplete',\n          expand: ['latest_invoice.payment_intent'],\n        });\n\n        await storage.updateUserStripeInfo(userId, customer.id, subscription.id);\n\n        const invoice = subscription.latest_invoice;\n        if (typeof invoice === 'object' && invoice && 'payment_intent' in invoice) {\n          const paymentIntent = invoice.payment_intent;\n          if (typeof paymentIntent === 'object' && paymentIntent && 'client_secret' in paymentIntent) {\n            return res.json({\n              subscriptionId: subscription.id,\n              clientSecret: paymentIntent.client_secret,\n            });\n          }\n        }\n\n        res.status(400).json({ message: 'Failed to create subscription' });\n      } catch (error) {\n        console.error(\"Stripe subscription error:\", error);\n        res.status(500).json({ message: \"Failed to create subscription\" });\n      }\n    });\n\n    // Webhook handler for Stripe events\n    app.post('/api/stripe/webhook', async (req, res) => {\n      try {\n        const event = req.body;\n\n        switch (event.type) {\n          case 'invoice.payment_succeeded':\n            // Handle successful payment\n            console.log('Payment succeeded:', event.data.object);\n            break;\n          case 'invoice.payment_failed':\n            // Handle failed payment\n            console.log('Payment failed:', event.data.object);\n            break;\n          case 'customer.subscription.updated':\n            // Handle subscription update\n            console.log('Subscription updated:', event.data.object);\n            break;\n          default:\n            console.log(`Unhandled event type: ${event.type}`);\n        }\n\n        res.json({ received: true });\n      } catch (error) {\n        console.error(\"Webhook error:\", error);\n        res.status(400).json({ message: \"Webhook error\" });\n      }\n    });\n  }\n\n  // Billing history\n  app.get('/api/billing/history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const billingHistory = await storage.getBillingHistory(userId);\n      res.json(billingHistory);\n    } catch (error) {\n      console.error(\"Error fetching billing history:\", error);\n      res.status(500).json({ message: \"Failed to fetch billing history\" });\n    }\n  });\n\n  // Usage monitoring and alerts\n  app.get('/api/usage/current', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const currentMonth = new Date().toISOString().slice(0, 7);\n      const usage = await storage.getUsageForMonth(userId, currentMonth);\n      \n      // Get user's actual subscription plan limits\n      const userPlan = await storage.getUserSubscriptionPlan(userId);\n      if (!userPlan) {\n        return res.status(404).json({ message: \"No subscription plan found\" });\n      }\n\n      const usageWithLimits = {\n        documents: { \n          current: usage.documents, \n          limit: userPlan.documentsLimit, \n          percentage: Math.round((usage.documents / userPlan.documentsLimit) * 100) \n        },\n        envelopes: { \n          current: usage.envelopes, \n          limit: userPlan.envelopesLimit, \n          percentage: Math.round((usage.envelopes / userPlan.envelopesLimit) * 100) \n        },\n        aiRequests: { \n          current: usage.aiRequests, \n          limit: userPlan.aiRequestsLimit, \n          percentage: Math.round((usage.aiRequests / userPlan.aiRequestsLimit) * 100) \n        },\n        planName: userPlan.name,\n        planPrice: userPlan.price\n      };\n\n      res.json(usageWithLimits);\n    } catch (error) {\n      console.error(\"Error fetching usage:\", error);\n      res.status(500).json({ message: \"Failed to fetch usage\" });\n    }\n  });\n\n  // Reminder system endpoint\n  app.post('/api/reminders/send', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { daysThreshold = 3 } = req.body; // Default to 3 days\n      \n      // Get all pending documents for this user\n      const documents = await storage.getDocuments(userId);\n      const pendingDocuments = documents.filter(doc => doc.status === 'pending');\n      \n      let remindersSent = 0;\n      const currentDate = new Date();\n      \n      for (const document of pendingDocuments) {\n        // Get document recipients\n        const docRecipients = await storage.getDocumentRecipients(document.id);\n        const pendingRecipients = docRecipients.filter(dr => dr.status === 'pending');\n        \n        for (const docRecipient of pendingRecipients) {\n          // Check if enough days have passed since document creation\n          const daysWaiting = Math.floor((currentDate.getTime() - new Date(document.createdAt).getTime()) / (1000 * 3600 * 24));\n          \n          if (daysWaiting >= daysThreshold) {\n            // Check if we've already sent a reminder recently (within last 2 days)\n            const recentReminder = await db\n              .select()\n              .from(emailNotifications)\n              .where(\n                and(\n                  eq(emailNotifications.userId, userId),\n                  eq(emailNotifications.notificationType, 'signing_reminder'),\n                  eq(emailNotifications.recipientEmail, docRecipient.recipient.email),\n                  eq(emailNotifications.metadata, sql`${JSON.stringify({ documentId: document.id })}`)\n                )\n              )\n              .orderBy(desc(emailNotifications.sentAt))\n              .limit(1);\n            \n            const shouldSendReminder = recentReminder.length === 0 || \n              (recentReminder[0].sentAt && (currentDate.getTime() - new Date(recentReminder[0].sentAt).getTime()) > (2 * 24 * 60 * 60 * 1000));\n            \n            if (shouldSendReminder) {\n              // Send reminder\n              const success = await sendSigningReminderNotification(\n                docRecipient.recipient.email,\n                docRecipient.recipient.name,\n                document.name,\n                req.user.claims?.first_name || 'Agent',\n                daysWaiting\n              );\n              \n              if (success) {\n                // Record the reminder\n                await storage.createEmailNotification({\n                  userId,\n                  emailType: 'signing_reminder',\n                  recipientEmail: docRecipient.recipient.email,\n                  subject: `Reminder: Please sign ${document.name}`,\n                  status: 'sent',\n                  documentId: document.id,\n                  sentAt: new Date(),\n                });\n                remindersSent++;\n              }\n            }\n          }\n        }\n      }\n      \n      res.json({ \n        message: `Sent ${remindersSent} signing reminders`,\n        remindersSent,\n        documentsChecked: pendingDocuments.length\n      });\n    } catch (error) {\n      console.error(\"Error sending reminders:\", error);\n      res.status(500).json({ message: \"Failed to send reminders\" });\n    }\n  });\n\n  // Auto-schedule reminder checks (every 6 hours)\n  setInterval(async () => {\n    try {\n      console.log(\"Running scheduled reminder check...\");\n      \n      // Get all users with pending documents\n      const pendingDocs = await db\n        .select({ userId: documents.userId })\n        .from(documents)\n        .where(eq(documents.status, 'pending'))\n        .groupBy(documents.userId);\n      \n      for (const doc of pendingDocs) {\n        // Simulate reminder check for each user\n        const documents = await storage.getDocuments(doc.userId);\n        const pendingDocuments = documents.filter(d => d.status === 'pending');\n        \n        let remindersSent = 0;\n        const currentDate = new Date();\n        \n        for (const document of pendingDocuments) {\n          const docRecipients = await storage.getDocumentRecipients(document.id);\n          const pendingRecipients = docRecipients.filter(dr => dr.status === 'pending');\n          \n          for (const docRecipient of pendingRecipients) {\n            const daysWaiting = Math.floor((currentDate.getTime() - new Date(document.createdAt).getTime()) / (1000 * 3600 * 24));\n            \n            if (daysWaiting >= 3) {\n              // Check for recent reminders\n              const recentReminder = await db\n                .select()\n                .from(emailNotifications)\n                .where(\n                  and(\n                    eq(emailNotifications.userId, doc.userId),\n                    eq(emailNotifications.emailType, 'signing_reminder'),\n                    eq(emailNotifications.recipientEmail, docRecipient.recipient.email)\n                  )\n                )\n                .orderBy(desc(emailNotifications.sentAt))\n                .limit(1);\n              \n              const shouldSendReminder = recentReminder.length === 0 || \n                (recentReminder[0].sentAt && (currentDate.getTime() - new Date(recentReminder[0].sentAt).getTime()) > (2 * 24 * 60 * 60 * 1000));\n              \n              if (shouldSendReminder) {\n                const user = await storage.getUser(doc.userId);\n                if (user) {\n                  const success = await sendSigningReminderNotification(\n                    docRecipient.recipient.email,\n                    docRecipient.recipient.name,\n                    document.name,\n                    user.firstName || 'Agent',\n                    daysWaiting\n                  );\n                  \n                  if (success) {\n                    await storage.createEmailNotification({\n                      userId: doc.userId,\n                      recipientEmail: docRecipient.recipient.email,\n                      emailType: 'signing_reminder',\n                      subject: `Reminder: Please sign ${document.name}`,\n                      status: 'sent',\n                      documentId: document.id,\n                      sentAt: new Date(),\n                    });\n                    remindersSent++;\n                  }\n                }\n              }\n            }\n          }\n        }\n        \n        if (remindersSent > 0) {\n          console.log(`Sent ${remindersSent} automatic reminders for user ${doc.userId}`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in scheduled reminder check:\", error);\n    }\n  }, 6 * 60 * 60 * 1000); // Every 6 hours\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":30935},"server/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set - emails will be logged instead of sent\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    if (!process.env.SENDGRID_API_KEY) {\n      // Log email instead of sending for development\n      console.log(\"=== EMAIL WOULD BE SENT ===\");\n      console.log(`To: ${params.to}`);\n      console.log(`From: ${params.from}`);\n      console.log(`Subject: ${params.subject}`);\n      console.log(`Content: ${params.text || params.html}`);\n      console.log(\"========================\");\n      return true;\n    }\n\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text || \"\",\n      html: params.html || \"\",\n    });\n    \n    console.log(`Email sent successfully to ${params.to}`);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport async function sendDocumentNotification(\n  recipientEmail: string,\n  recipientName: string,\n  documentName: string,\n  senderName: string,\n  customMessage?: string\n): Promise<boolean> {\n  const subject = `Please sign: ${documentName}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #333;\">Document Signature Required</h2>\n      <p>Hello ${recipientName},</p>\n      <p>${senderName} has sent you a document that requires your signature:</p>\n      <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n        <strong>${documentName}</strong>\n      </div>\n      ${customMessage ? `<p><em>${customMessage}</em></p>` : ''}\n      <p>Please review and sign the document at your earliest convenience.</p>\n      <p>Thank you,<br>DocuSign Pro Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: recipientEmail,\n    from: process.env.FROM_EMAIL || 'noreply@docusignpro.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendDocumentCompletedNotification(\n  agentEmail: string,\n  agentName: string,\n  documentName: string,\n  propertyAddress: string\n): Promise<boolean> {\n  const subject = `Document Completed: ${documentName}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #28a745;\">Document Signing Complete!</h2>\n      <p>Hello ${agentName},</p>\n      <p>Great news! The following document has been fully executed:</p>\n      <div style=\"background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #28a745;\">\n        <strong>${documentName}</strong><br>\n        <span style=\"color: #666;\">${propertyAddress}</span>\n      </div>\n      <p>All parties have successfully signed the document. You can download the completed document from your dashboard.</p>\n      <p>Best regards,<br>DocuSign Pro Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: agentEmail,\n    from: process.env.FROM_EMAIL || 'noreply@docusignpro.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendUsageAlertNotification(\n  userEmail: string,\n  userName: string,\n  usageType: string,\n  currentUsage: number,\n  limit: number,\n  percentageUsed: number\n): Promise<boolean> {\n  const subject = `Usage Alert: ${percentageUsed}% of ${usageType} limit reached`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #ffc107;\">Usage Alert</h2>\n      <p>Hello ${userName},</p>\n      <p>You have used <strong>${percentageUsed}%</strong> of your monthly ${usageType} limit.</p>\n      <div style=\"background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107;\">\n        <strong>Current Usage:</strong> ${currentUsage} / ${limit} ${usageType}<br>\n        <strong>Percentage Used:</strong> ${percentageUsed}%\n      </div>\n      <p>Consider upgrading your plan to avoid service interruptions.</p>\n      <p>Best regards,<br>DocuSign Pro Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    from: process.env.FROM_EMAIL || 'noreply@docusignpro.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendDocumentFailedNotification(\n  agentEmail: string,\n  agentName: string,\n  documentName: string,\n  errorReason: string\n): Promise<boolean> {\n  const subject = `Document Processing Failed: ${documentName}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #dc3545;\">Document Processing Failed</h2>\n      <p>Hello ${agentName},</p>\n      <p>Unfortunately, there was an issue processing your document:</p>\n      <div style=\"background-color: #f8d7da; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #dc3545;\">\n        <strong>${documentName}</strong><br>\n        <span style=\"color: #721c24;\"><strong>Error:</strong> ${errorReason}</span>\n      </div>\n      <p>Please try uploading the document again, or contact support if the issue persists.</p>\n      <p>Best regards,<br>DocuSign Pro Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: agentEmail,\n    from: process.env.FROM_EMAIL || 'noreply@docusignpro.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendDocumentProcessingNotification(\n  agentEmail: string,\n  agentName: string,\n  documentName: string,\n  status: string\n): Promise<boolean> {\n  const subject = `Document Update: ${documentName}`;\n  const statusColors: Record<string, string> = {\n    processing: '#6c757d',\n    pending: '#17a2b8',\n    completed: '#28a745',\n    failed: '#dc3545'\n  };\n  \n  const statusMessages: Record<string, string> = {\n    processing: 'Your document is being processed with AI analysis.',\n    pending: 'Your document is ready and has been sent to recipients for signing.',\n    completed: 'All parties have signed the document successfully.',\n    failed: 'There was an issue processing your document.'\n  };\n\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: ${statusColors[status] || '#6c757d'};\">Document Status Update</h2>\n      <p>Hello ${agentName},</p>\n      <p>Your document status has been updated:</p>\n      <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid ${statusColors[status] || '#6c757d'};\">\n        <strong>${documentName}</strong><br>\n        <span style=\"color: ${statusColors[status] || '#6c757d'}; text-transform: uppercase; font-weight: bold;\">Status: ${status}</span><br>\n        <span style=\"color: #666;\">${statusMessages[status] || 'Status updated.'}</span>\n      </div>\n      <p>You can check your dashboard for more details and track the signing progress.</p>\n      <p>Best regards,<br>DocuSign Pro Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: agentEmail,\n    from: process.env.FROM_EMAIL || 'noreply@docusignpro.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendSigningReminderNotification(\n  recipientEmail: string,\n  recipientName: string,\n  documentName: string,\n  senderName: string,\n  daysWaiting: number\n): Promise<boolean> {\n  const subject = `Reminder: Please sign ${documentName}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #ffc107;\">Signature Reminder</h2>\n      <p>Hello ${recipientName},</p>\n      <p>This is a friendly reminder that you have a document waiting for your signature:</p>\n      <div style=\"background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107;\">\n        <strong>${documentName}</strong><br>\n        <span style=\"color: #856404;\">From: ${senderName}</span><br>\n        <span style=\"color: #856404;\">Waiting: ${daysWaiting} day${daysWaiting > 1 ? 's' : ''}</span>\n      </div>\n      <p>Please review and sign the document at your earliest convenience to keep the transaction moving forward.</p>\n      <p>Thank you for your attention to this matter.</p>\n      <p>Best regards,<br>DocuSign Pro Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: recipientEmail,\n    from: process.env.FROM_EMAIL || 'noreply@docusignpro.com',\n    subject,\n    html,\n  });\n}\n","size_bytes":8630},"server/storage.ts":{"content":"import {\n  users,\n  recipients,\n  documents,\n  documentRecipients,\n  usageRecords,\n  subscriptionPlans,\n  billingRecords,\n  emailNotifications,\n  type User,\n  type UpsertUser,\n  type Recipient,\n  type InsertRecipient,\n  type Document,\n  type InsertDocument,\n  type DocumentRecipient,\n  type InsertDocumentRecipient,\n  type UsageRecord,\n  type InsertUsageRecord,\n  type SubscriptionPlan,\n  type BillingRecord,\n  type InsertBillingRecord,\n  type EmailNotification,\n  type InsertEmailNotification,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n\n  // Recipients operations\n  getRecipients(userId: string): Promise<Recipient[]>;\n  createRecipient(recipient: InsertRecipient): Promise<Recipient>;\n  updateRecipient(id: string, recipient: Partial<Recipient>): Promise<Recipient>;\n  deleteRecipient(id: string): Promise<void>;\n\n  // Documents operations\n  getDocuments(userId: string): Promise<Document[]>;\n  getDocument(id: string): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, document: Partial<Document>): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n\n  // Document recipients operations\n  getDocumentRecipients(documentId: string): Promise<(DocumentRecipient & { recipient: Recipient })[]>;\n  addDocumentRecipient(documentRecipient: InsertDocumentRecipient): Promise<DocumentRecipient>;\n  updateDocumentRecipientStatus(id: string, status: string, signedAt?: Date): Promise<DocumentRecipient>;\n\n  // Usage tracking\n  getUsageForMonth(userId: string, month: string): Promise<{ documents: number; envelopes: number; aiRequests: number }>;\n  recordUsage(usage: InsertUsageRecord): Promise<UsageRecord>;\n\n  // Subscription plans\n  getSubscriptionPlans(): Promise<SubscriptionPlan[]>;\n  getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined>;\n  getUserSubscriptionPlan(userId: string): Promise<SubscriptionPlan | null>;\n\n  // Usage enforcement\n  checkUsageLimits(userId: string, recordType: 'document' | 'envelope' | 'ai_request'): Promise<{ allowed: boolean; current: number; limit: number; message?: string }>;\n  canPerformAction(userId: string, actionType: 'upload_document' | 'create_envelope' | 'ai_request'): Promise<{ allowed: boolean; message?: string }>;\n  getUsageThresholdAlerts(userId: string): Promise<{ recordType: string; percentage: number; current: number; limit: number }[]>;\n\n  // Billing operations\n  createBillingRecord(billing: InsertBillingRecord): Promise<BillingRecord>;\n  getBillingHistory(userId: string): Promise<BillingRecord[]>;\n\n  // Email notifications\n  createEmailNotification(notification: InsertEmailNotification): Promise<EmailNotification>;\n  updateEmailNotificationStatus(id: string, status: string, sentAt?: Date): Promise<EmailNotification>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Recipients operations\n  async getRecipients(userId: string): Promise<Recipient[]> {\n    return await db.select().from(recipients).where(eq(recipients.userId, userId)).orderBy(desc(recipients.createdAt));\n  }\n\n  async createRecipient(recipient: InsertRecipient): Promise<Recipient> {\n    const [newRecipient] = await db.insert(recipients).values(recipient).returning();\n    return newRecipient;\n  }\n\n  async updateRecipient(id: string, recipient: Partial<Recipient>): Promise<Recipient> {\n    const [updatedRecipient] = await db\n      .update(recipients)\n      .set({ ...recipient, updatedAt: new Date() })\n      .where(eq(recipients.id, id))\n      .returning();\n    return updatedRecipient;\n  }\n\n  async deleteRecipient(id: string): Promise<void> {\n    await db.delete(recipients).where(eq(recipients.id, id));\n  }\n\n  // Documents operations\n  async getDocuments(userId: string): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.userId, userId)).orderBy(desc(documents.createdAt));\n  }\n\n  async getDocument(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document;\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const [newDocument] = await db.insert(documents).values(document).returning();\n    return newDocument;\n  }\n\n  async updateDocument(id: string, document: Partial<Document>): Promise<Document> {\n    const [updatedDocument] = await db\n      .update(documents)\n      .set({ ...document, updatedAt: new Date() })\n      .where(eq(documents.id, id))\n      .returning();\n    return updatedDocument;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  // Document recipients operations\n  async getDocumentRecipients(documentId: string): Promise<(DocumentRecipient & { recipient: Recipient })[]> {\n    return await db\n      .select({\n        id: documentRecipients.id,\n        documentId: documentRecipients.documentId,\n        recipientId: documentRecipients.recipientId,\n        signingOrder: documentRecipients.signingOrder,\n        status: documentRecipients.status,\n        signedAt: documentRecipients.signedAt,\n        createdAt: documentRecipients.createdAt,\n        recipient: recipients,\n      })\n      .from(documentRecipients)\n      .innerJoin(recipients, eq(documentRecipients.recipientId, recipients.id))\n      .where(eq(documentRecipients.documentId, documentId))\n      .orderBy(documentRecipients.signingOrder);\n  }\n\n  async addDocumentRecipient(documentRecipient: InsertDocumentRecipient): Promise<DocumentRecipient> {\n    const [newDocumentRecipient] = await db.insert(documentRecipients).values(documentRecipient).returning();\n    return newDocumentRecipient;\n  }\n\n  async updateDocumentRecipientStatus(id: string, status: string, signedAt?: Date): Promise<DocumentRecipient> {\n    const [updatedDocumentRecipient] = await db\n      .update(documentRecipients)\n      .set({ status, signedAt })\n      .where(eq(documentRecipients.id, id))\n      .returning();\n    return updatedDocumentRecipient;\n  }\n\n  // Usage tracking\n  async getUsageForMonth(userId: string, month: string): Promise<{ documents: number; envelopes: number; aiRequests: number }> {\n    const usage = await db\n      .select({\n        recordType: usageRecords.recordType,\n        totalCount: sql<number>`sum(${usageRecords.count})`,\n      })\n      .from(usageRecords)\n      .where(and(eq(usageRecords.userId, userId), eq(usageRecords.recordMonth, month)))\n      .groupBy(usageRecords.recordType);\n\n    const result = { documents: 0, envelopes: 0, aiRequests: 0 };\n    usage.forEach((record) => {\n      if (record.recordType === \"document\") result.documents = Number(record.totalCount);\n      if (record.recordType === \"envelope\") result.envelopes = Number(record.totalCount);\n      if (record.recordType === \"ai_request\") result.aiRequests = Number(record.totalCount);\n    });\n\n    return result;\n  }\n\n  async recordUsage(usage: InsertUsageRecord): Promise<UsageRecord> {\n    // Try to increment existing record or create new one\n    const existing = await db\n      .select()\n      .from(usageRecords)\n      .where(\n        and(\n          eq(usageRecords.userId, usage.userId),\n          eq(usageRecords.recordType, usage.recordType),\n          eq(usageRecords.recordMonth, usage.recordMonth)\n        )\n      )\n      .limit(1);\n\n    if (existing.length > 0) {\n      const [updatedRecord] = await db\n        .update(usageRecords)\n        .set({ count: sql`${usageRecords.count} + ${usage.count || 1}` })\n        .where(eq(usageRecords.id, existing[0].id))\n        .returning();\n      return updatedRecord;\n    } else {\n      const [newRecord] = await db.insert(usageRecords).values(usage).returning();\n      return newRecord;\n    }\n  }\n\n  // Subscription plans\n  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    return await db.select().from(subscriptionPlans).orderBy(subscriptionPlans.price);\n  }\n\n  async getUserSubscriptionPlan(userId: string): Promise<SubscriptionPlan | null> {\n    const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n    if (user.length === 0) return null;\n    \n    if (!user[0].subscriptionPlan) return null;\n    \n    const plan = await db.select().from(subscriptionPlans).where(eq(subscriptionPlans.id, user[0].subscriptionPlan)).limit(1);\n    return plan.length > 0 ? plan[0] : null;\n  }\n\n  // Usage enforcement functions\n  async checkUsageLimits(userId: string, recordType: 'document' | 'envelope' | 'ai_request'): Promise<{ allowed: boolean; current: number; limit: number; message?: string }> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const usage = await this.getUsageForMonth(userId, currentMonth);\n    const plan = await this.getUserSubscriptionPlan(userId);\n    \n    if (!plan) {\n      return { allowed: false, current: 0, limit: 0, message: \"No subscription plan found\" };\n    }\n\n    let current: number, limit: number;\n    switch (recordType) {\n      case 'document':\n        current = usage.documents;\n        limit = plan.documentsLimit;\n        break;\n      case 'envelope':\n        current = usage.envelopes;\n        limit = plan.envelopesLimit;\n        break;\n      case 'ai_request':\n        current = usage.aiRequests;\n        limit = plan.aiRequestsLimit;\n        break;\n    }\n\n    const allowed = current < limit;\n    const message = allowed ? undefined : `You have reached your ${recordType} limit of ${limit} for this month. Upgrade your plan to continue.`;\n    \n    return { allowed, current, limit, message };\n  }\n\n  async canPerformAction(userId: string, actionType: 'upload_document' | 'create_envelope' | 'ai_request'): Promise<{ allowed: boolean; message?: string }> {\n    // Map action types to record types\n    const recordTypeMap: Record<string, 'document' | 'envelope' | 'ai_request'> = {\n      'upload_document': 'document',\n      'create_envelope': 'envelope', \n      'ai_request': 'ai_request'\n    };\n\n    const recordType = recordTypeMap[actionType];\n    if (!recordType) {\n      return { allowed: false, message: \"Invalid action type\" };\n    }\n\n    const result = await this.checkUsageLimits(userId, recordType);\n    return { allowed: result.allowed, message: result.message };\n  }\n\n  async getUsageThresholdAlerts(userId: string): Promise<{ recordType: string; percentage: number; current: number; limit: number }[]> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const usage = await this.getUsageForMonth(userId, currentMonth);\n    const plan = await this.getUserSubscriptionPlan(userId);\n    \n    if (!plan) return [];\n\n    const alerts: { recordType: string; percentage: number; current: number; limit: number }[] = [];\n    const thresholds = [80, 90, 100]; // Alert at 80%, 90%, and 100%\n\n    const usageData = [\n      { type: 'documents', current: usage.documents, limit: plan.documentsLimit },\n      { type: 'envelopes', current: usage.envelopes, limit: plan.envelopesLimit },\n      { type: 'ai_requests', current: usage.aiRequests, limit: plan.aiRequestsLimit }\n    ];\n\n    for (const data of usageData) {\n      if (data.limit > 0) {\n        const percentage = Math.round((data.current / data.limit) * 100);\n        \n        // Check if we've crossed a threshold\n        for (const threshold of thresholds) {\n          if (percentage >= threshold) {\n            // Check if we haven't already alerted for this threshold this month\n            const hasBeenAlerted = await this.hasBeenAlertedForThreshold(userId, data.type, threshold, currentMonth);\n            \n            if (!hasBeenAlerted) {\n              alerts.push({\n                recordType: data.type,\n                percentage: threshold, // Use threshold instead of calculated percentage for consistency\n                current: data.current,\n                limit: data.limit\n              });\n              \n              // Record that we've alerted for this threshold\n              await this.recordThresholdAlert(userId, data.type, threshold, currentMonth);\n            }\n            break; // Only alert for the highest threshold crossed\n          }\n        }\n      }\n    }\n\n    return alerts;\n  }\n\n  private async hasBeenAlertedForThreshold(userId: string, recordType: string, threshold: number, month: string): Promise<boolean> {\n    const notifications = await db\n      .select()\n      .from(emailNotifications)\n      .where(\n        and(\n          eq(emailNotifications.userId, userId),\n          eq(emailNotifications.emailType, `usage_alert_${recordType}_${threshold}`),\n          eq(emailNotifications.subject, `Usage Alert: ${threshold}% of ${recordType} limit reached`)\n        )\n      )\n      .limit(1);\n    \n    return notifications.length > 0;\n  }\n\n  private async recordThresholdAlert(userId: string, recordType: string, threshold: number, month: string): Promise<void> {\n    await this.createEmailNotification({\n      userId,\n      recipientEmail: '', // Will be filled when sending\n      emailType: `usage_alert_${recordType}_${threshold}`,\n      subject: `Usage Alert: ${threshold}% of ${recordType} limit reached`,\n      status: 'sent',\n      sentAt: new Date(),\n    });\n  }\n\n  async getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined> {\n    const [plan] = await db.select().from(subscriptionPlans).where(eq(subscriptionPlans.id, id));\n    return plan;\n  }\n\n  // Billing operations\n  async createBillingRecord(billing: InsertBillingRecord): Promise<BillingRecord> {\n    const [newBilling] = await db.insert(billingRecords).values(billing).returning();\n    return newBilling;\n  }\n\n  async getBillingHistory(userId: string): Promise<BillingRecord[]> {\n    return await db\n      .select()\n      .from(billingRecords)\n      .where(eq(billingRecords.userId, userId))\n      .orderBy(desc(billingRecords.billingDate));\n  }\n\n  // Email notifications\n  async createEmailNotification(notification: InsertEmailNotification): Promise<EmailNotification> {\n    const [newNotification] = await db.insert(emailNotifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async updateEmailNotificationStatus(id: string, status: string, sentAt?: Date): Promise<EmailNotification> {\n    const [updatedNotification] = await db\n      .update(emailNotifications)\n      .set({ status, sentAt })\n      .where(eq(emailNotifications.id, id))\n      .returning();\n    return updatedNotification;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15589},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  jsonb,\n  integer,\n  decimal,\n  boolean,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// User storage table - required for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  brokerage: varchar(\"brokerage\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  subscriptionPlan: varchar(\"subscription_plan\").default(\"starter\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"active\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subscription plans\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  documentsLimit: integer(\"documents_limit\").notNull(),\n  envelopesLimit: integer(\"envelopes_limit\").notNull(),\n  aiRequestsLimit: integer(\"ai_requests_limit\").notNull(),\n  storageLimit: integer(\"storage_limit\").notNull(), // in GB\n  features: jsonb(\"features\").$type<string[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Recipients management\nexport const recipients = pgTable(\"recipients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\"),\n  role: varchar(\"role\").notNull(), // buyer, seller, agent, witness\n  documentsSignedCount: integer(\"documents_signed_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Documents\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  filename: varchar(\"filename\").notNull(),\n  documentType: varchar(\"document_type\"), // purchase_agreement, listing_agreement, etc.\n  propertyAddress: varchar(\"property_address\"),\n  propertyValue: decimal(\"property_value\", { precision: 12, scale: 2 }),\n  status: varchar(\"status\").default(\"processing\"), // processing, pending, completed, failed\n  fileUrl: varchar(\"file_url\"),\n  filePath: varchar(\"file_path\"),\n  fileSize: integer(\"file_size\"),\n  docusignEnvelopeId: varchar(\"docusign_envelope_id\"),\n  aiParsingData: jsonb(\"ai_parsing_data\"),\n  emailSubject: varchar(\"email_subject\"),\n  emailMessage: text(\"email_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Document recipients (many-to-many relationship)\nexport const documentRecipients = pgTable(\"document_recipients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").notNull().references(() => documents.id),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => recipients.id),\n  signingOrder: integer(\"signing_order\").default(1),\n  status: varchar(\"status\").default(\"pending\"), // pending, sent, signed, declined\n  signedAt: timestamp(\"signed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Usage tracking\nexport const usageRecords = pgTable(\"usage_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  recordType: varchar(\"record_type\").notNull(), // document, envelope, ai_request\n  recordMonth: varchar(\"record_month\").notNull(), // YYYY-MM format\n  count: integer(\"count\").default(1),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Billing records\nexport const billingRecords = pgTable(\"billing_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  stripeInvoiceId: varchar(\"stripe_invoice_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: varchar(\"description\").notNull(),\n  status: varchar(\"status\").notNull(), // paid, pending, failed\n  billingDate: timestamp(\"billing_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email notifications log\nexport const emailNotifications = pgTable(\"email_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  documentId: varchar(\"document_id\").references(() => documents.id),\n  recipientEmail: varchar(\"recipient_email\").notNull(),\n  emailType: varchar(\"email_type\").notNull(), // document_sent, reminder, completion\n  subject: varchar(\"subject\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, sent, failed\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertSubscriptionPlan = typeof subscriptionPlans.$inferInsert;\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\n\nexport type InsertRecipient = typeof recipients.$inferInsert;\nexport type Recipient = typeof recipients.$inferSelect;\n\nexport type InsertDocument = typeof documents.$inferInsert;\nexport type Document = typeof documents.$inferSelect;\n\nexport type InsertDocumentRecipient = typeof documentRecipients.$inferInsert;\nexport type DocumentRecipient = typeof documentRecipients.$inferSelect;\n\nexport type InsertUsageRecord = typeof usageRecords.$inferInsert;\nexport type UsageRecord = typeof usageRecords.$inferSelect;\n\nexport type InsertBillingRecord = typeof billingRecords.$inferInsert;\nexport type BillingRecord = typeof billingRecords.$inferSelect;\n\nexport type InsertEmailNotification = typeof emailNotifications.$inferInsert;\nexport type EmailNotification = typeof emailNotifications.$inferSelect;\n\n// Zod schemas\nexport const insertRecipientSchema = createInsertSchema(recipients).omit({\n  id: true,\n  documentsSignedCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentRecipientSchema = createInsertSchema(documentRecipients).omit({\n  id: true,\n  status: true,\n  signedAt: true,\n  createdAt: true,\n});\n","size_bytes":7088},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/lib/auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Documents from \"@/pages/documents\";\nimport Upload from \"@/pages/upload\";\nimport Recipients from \"@/pages/recipients\";\nimport Billing from \"@/pages/billing\";\nimport Subscribe from \"@/pages/subscribe\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!user ? (\n        <Route path=\"/\" component={Login} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/documents\" component={Documents} />\n          <Route path=\"/upload\" component={Upload} />\n          <Route path=\"/recipients\" component={Recipients} />\n          <Route path=\"/billing\" component={Billing} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1733},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(217.2, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Custom styles for the Real Estate DocuSign application */\n.usage-bar {\n  background: linear-gradient(90deg, var(--primary) 0%, var(--primary) var(--usage-percent, 0%), var(--muted) var(--usage-percent, 0%));\n}\n\n/* Drag and drop styles */\n.drag-over {\n  border-color: var(--primary);\n  background-color: hsl(221.2 83.2% 53.3% / 0.05);\n}\n\n/* Professional styling for real estate branding */\n.real-estate-brand {\n  background: linear-gradient(135deg, var(--primary) 0%, hsl(221.2, 83.2%, 45%) 100%);\n}\n\n/* Enhanced button hover effects */\n.btn-primary-enhanced {\n  background: var(--primary);\n  transition: all 0.2s ease-in-out;\n}\n\n.btn-primary-enhanced:hover {\n  background: hsl(221.2, 83.2%, 48%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px hsl(221.2 83.2% 53.3% / 0.3);\n}\n\n/* Status badge colors */\n.status-completed {\n  background-color: hsl(142, 76%, 36%);\n  color: white;\n}\n\n.status-pending {\n  background-color: hsl(38, 92%, 50%);\n  color: white;\n}\n\n.status-processing {\n  background-color: hsl(221.2, 83.2%, 53.3%);\n  color: white;\n}\n\n.status-failed {\n  background-color: hsl(0, 84.2%, 60.2%);\n  color: white;\n}\n\n/* Loading spinner */\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.fa-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Professional table styling */\n.professional-table th {\n  background-color: var(--muted);\n  font-weight: 600;\n  color: var(--foreground);\n}\n\n.professional-table tr:hover {\n  background-color: hsl(var(--muted) / 0.5);\n}\n\n/* Card hover effects */\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px hsl(221.2 83.2% 53.3% / 0.15);\n  transition: all 0.2s ease-in-out;\n}\n\n/* Real estate professional styling */\n.real-estate-gradient {\n  background: linear-gradient(135deg, \n    hsl(221.2, 83.2%, 53.3%) 0%, \n    hsl(221.2, 83.2%, 45%) 50%, \n    hsl(221.2, 83.2%, 40%) 100%);\n}\n\n/* Enhanced focus states for accessibility */\n.focus-enhanced:focus {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n/* Responsive text sizing */\n@media (max-width: 768px) {\n  .responsive-text-lg {\n    font-size: 1rem;\n  }\n  \n  .responsive-text-xl {\n    font-size: 1.125rem;\n  }\n  \n  .responsive-text-2xl {\n    font-size: 1.25rem;\n  }\n}\n\n/* Animation for page transitions */\n.page-transition {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Professional shadows */\n.shadow-professional {\n  box-shadow: 0 4px 6px -1px hsl(221.2 83.2% 53.3% / 0.1), 0 2px 4px -1px hsl(221.2 83.2% 53.3% / 0.06);\n}\n\n.shadow-professional-lg {\n  box-shadow: 0 10px 15px -3px hsl(221.2 83.2% 53.3% / 0.1), 0 4px 6px -2px hsl(221.2 83.2% 53.3% / 0.05);\n}\n","size_bytes":5968},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/document-upload.tsx":{"content":"import { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface DocumentUploadProps {\n  onFileSelect: (file: File | null) => void;\n  selectedFile: File | null;\n}\n\nexport function DocumentUpload({ onFileSelect, selectedFile }: DocumentUploadProps) {\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles.length > 0) {\n      onFileSelect(acceptedFiles[0]);\n    }\n  }, [onFileSelect]);\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf']\n    },\n    maxFiles: 1,\n    maxSize: 25 * 1024 * 1024, // 25MB\n  });\n\n  const removeFile = () => {\n    onFileSelect(null);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {!selectedFile ? (\n        <div\n          {...getRootProps()}\n          className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n            isDragActive && !isDragReject\n              ? \"border-primary bg-primary/5\"\n              : isDragReject\n              ? \"border-destructive bg-destructive/5\"\n              : \"border-border hover:border-primary hover:bg-primary/5\"\n          }`}\n          data-testid=\"upload-zone\"\n        >\n          <input {...getInputProps()} data-testid=\"file-input\" />\n          <div className=\"space-y-4\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n              <i className={`text-2xl ${\n                isDragActive && !isDragReject \n                  ? \"fas fa-file-import text-primary\"\n                  : isDragReject\n                  ? \"fas fa-times text-destructive\"\n                  : \"fas fa-cloud-upload-alt text-primary\"\n              }`}></i>\n            </div>\n            <div>\n              {isDragActive && !isDragReject ? (\n                <p className=\"text-lg font-medium text-primary\">Drop your PDF here</p>\n              ) : isDragReject ? (\n                <p className=\"text-lg font-medium text-destructive\">Only PDF files are supported</p>\n              ) : (\n                <>\n                  <p className=\"text-lg font-medium text-foreground\">Drop your PDF here or click to browse</p>\n                  <p className=\"text-muted-foreground\">Supports PDF files up to 25MB</p>\n                </>\n              )}\n            </div>\n            {!isDragActive && (\n              <Button type=\"button\" data-testid=\"button-choose-file\">\n                Choose File\n              </Button>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"border border-border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-file-pdf text-red-600\"></i>\n              </div>\n              <div>\n                <p className=\"font-medium text-foreground\" data-testid=\"selected-file-name\">\n                  {selectedFile.name}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"selected-file-size\">\n                  {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n                </p>\n              </div>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={removeFile}\n              data-testid=\"button-remove-file\"\n            >\n              <i className=\"fas fa-times text-muted-foreground\"></i>\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3708},"client/src/components/usage-bar.tsx":{"content":"interface UsageBarProps {\n  label: string;\n  current: number;\n  limit: number;\n}\n\nexport function UsageBar({ label, current, limit }: UsageBarProps) {\n  const percentage = Math.min(Math.round((current / limit) * 100), 100);\n  \n  // Determine color based on usage percentage\n  const getColorClass = () => {\n    if (percentage >= 95) return \"bg-destructive\";\n    if (percentage >= 80) return \"bg-orange-500\";\n    return \"bg-primary\";\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between text-sm\">\n        <span className=\"text-foreground font-medium\">{label}</span>\n        <span className=\"text-muted-foreground\" data-testid={`usage-text-${label.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {current.toLocaleString()} / {limit.toLocaleString()}\n        </span>\n      </div>\n      <div className=\"w-full bg-muted rounded-full h-3 overflow-hidden\">\n        <div \n          className={`h-full rounded-full transition-all duration-300 ${getColorClass()}`}\n          style={{ width: `${percentage}%` }}\n          data-testid={`usage-bar-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n        />\n      </div>\n      <div className=\"flex justify-between text-xs\">\n        <span className=\"text-muted-foreground\">{percentage}% used</span>\n        <span className=\"text-muted-foreground\">\n          {(limit - current).toLocaleString()} remaining\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1424},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/billing.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { UsageBar } from \"@/components/usage-bar\";\nimport { useLocation } from \"wouter\";\n\nexport default function Billing() {\n  const [, setLocation] = useLocation();\n\n  const { data: usage, isLoading: usageLoading } = useQuery({\n    queryKey: [\"/api/usage/current\"],\n  });\n\n  const { data: billingHistory, isLoading: billingLoading } = useQuery({\n    queryKey: [\"/api/billing/history\"],\n  });\n\n  // Mock subscription data - would come from Stripe in production\n  const subscriptionData = {\n    plan: \"Professional Plan\",\n    price: \"$99/month\",\n    status: \"active\",\n    features: {\n      documents: 200,\n      envelopes: 500,\n      aiRequests: 1000,\n      storage: \"50 GB\",\n    }\n  };\n\n  // Mock pricing plans\n  const pricingPlans = [\n    {\n      id: \"starter\",\n      name: \"Starter\",\n      price: 29,\n      documents: 50,\n      envelopes: 100,\n      aiRequests: 500,\n      storage: \"10 GB\",\n      features: [\"Email support\"],\n      current: false,\n    },\n    {\n      id: \"professional\",\n      name: \"Professional\",\n      price: 99,\n      documents: 200,\n      envelopes: 500,\n      aiRequests: 1000,\n      storage: \"50 GB\",\n      features: [\"Priority support\", \"Advanced analytics\"],\n      current: true,\n    },\n    {\n      id: \"enterprise\",\n      name: \"Enterprise\",\n      price: 249,\n      documents: \"Unlimited\",\n      envelopes: \"Unlimited\",\n      aiRequests: \"Unlimited\",\n      storage: \"500 GB\",\n      features: [\"24/7 phone support\", \"Custom integrations\"],\n      current: false,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Billing & Subscription</h1>\n              <p className=\"text-muted-foreground\">Manage your subscription plan and billing information</p>\n            </div>\n            <Button data-testid=\"button-billing-portal\">\n              Billing Portal\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-8\">\n          {/* Current Plan */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Current Plan</CardTitle>\n                <Badge variant=\"secondary\">Active</Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <div className=\"flex items-center space-x-4 mb-4\">\n                    <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-crown text-primary-foreground text-xl\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"text-xl font-bold text-foreground\">{subscriptionData.plan}</h4>\n                      <p className=\"text-muted-foreground\">{subscriptionData.price} • Billed monthly</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Documents per month</p>\n                      <p className=\"font-semibold text-foreground\">{subscriptionData.features.documents}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Envelopes per month</p>\n                      <p className=\"font-semibold text-foreground\">{subscriptionData.features.envelopes}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">AI parsing requests</p>\n                      <p className=\"font-semibold text-foreground\">{subscriptionData.features.aiRequests}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Storage</p>\n                      <p className=\"font-semibold text-foreground\">{subscriptionData.features.storage}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <Button \n                    className=\"w-full\"\n                    onClick={() => setLocation('/subscribe')}\n                    data-testid=\"button-upgrade-plan\"\n                  >\n                    Upgrade Plan\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-change-billing\">\n                    Change Billing\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full text-destructive hover:text-destructive/80\"\n                    data-testid=\"button-cancel-subscription\"\n                  >\n                    Cancel Subscription\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Usage This Month */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Usage This Month</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {usageLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-muted rounded w-1/3 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"space-y-3\">\n                    <UsageBar\n                      label=\"Documents Processed\"\n                      current={(usage as any)?.documents?.current || 0}\n                      limit={(usage as any)?.documents?.limit || 200}\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      {((usage as any)?.documents?.limit || 200) - ((usage as any)?.documents?.current || 0)} remaining this month\n                    </p>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <UsageBar\n                      label=\"Envelopes Sent\"\n                      current={(usage as any)?.envelopes?.current || 0}\n                      limit={(usage as any)?.envelopes?.limit || 500}\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      {((usage as any)?.envelopes?.limit || 500) - ((usage as any)?.envelopes?.current || 0)} remaining this month\n                    </p>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <UsageBar\n                      label=\"AI Parsing Requests\"\n                      current={(usage as any)?.aiRequests?.current || 0}\n                      limit={(usage as any)?.aiRequests?.limit || 1000}\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      {((usage as any)?.aiRequests?.limit || 1000) - ((usage as any)?.aiRequests?.current || 0)} remaining this month\n                    </p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Pricing Plans */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Available Plans</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {pricingPlans.map((plan) => (\n                  <div \n                    key={plan.id} \n                    className={`border rounded-lg p-6 ${plan.current ? 'border-primary border-2 relative' : 'border-border'}`}\n                    data-testid={`card-plan-${plan.id}`}\n                  >\n                    {plan.current && (\n                      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                        <Badge className=\"bg-primary text-primary-foreground\">\n                          Current\n                        </Badge>\n                      </div>\n                    )}\n                    \n                    <div className=\"text-center mb-6\">\n                      <h4 className=\"text-lg font-semibold text-foreground\">{plan.name}</h4>\n                      <div className=\"mt-2\">\n                        <span className=\"text-3xl font-bold text-foreground\">${plan.price}</span>\n                        <span className=\"text-muted-foreground\">/month</span>\n                      </div>\n                    </div>\n                    \n                    <ul className=\"space-y-3 text-sm mb-6\">\n                      <li className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-check text-green-600\"></i>\n                        <span>{plan.documents} documents/month</span>\n                      </li>\n                      <li className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-check text-green-600\"></i>\n                        <span>{plan.envelopes} envelopes/month</span>\n                      </li>\n                      <li className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-check text-green-600\"></i>\n                        <span>{plan.aiRequests} AI requests/month</span>\n                      </li>\n                      <li className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-check text-green-600\"></i>\n                        <span>{plan.storage} storage</span>\n                      </li>\n                      {plan.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                    \n                    <Button \n                      className={`w-full ${plan.current ? 'bg-primary text-primary-foreground' : ''}`}\n                      variant={plan.current ? 'default' : 'outline'}\n                      disabled={plan.current}\n                      onClick={() => plan.current ? null : setLocation('/subscribe')}\n                      data-testid={`button-select-plan-${plan.id}`}\n                    >\n                      {plan.current ? 'Current Plan' : 'Upgrade'}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Method */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Payment Method</CardTitle>\n                <Button variant=\"ghost\" data-testid=\"button-update-payment\">\n                  Update\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-8 bg-blue-600 rounded flex items-center justify-center\">\n                  <i className=\"fab fa-cc-visa text-white\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\">•••• •••• •••• 4242</p>\n                  <p className=\"text-sm text-muted-foreground\">Expires 12/25</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Billing History */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Billing History</CardTitle>\n                <Button variant=\"ghost\" data-testid=\"button-view-all-invoices\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {billingLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse flex justify-between py-3\">\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-48\"></div>\n                        <div className=\"h-3 bg-muted rounded w-24\"></div>\n                      </div>\n                      <div className=\"text-right space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-16\"></div>\n                        <div className=\"h-3 bg-muted rounded w-20\"></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Mock billing history */}\n                  {[\n                    { description: \"Professional Plan - February 2024\", date: \"Feb 1, 2024\", amount: \"$99.00\", status: \"Paid\" },\n                    { description: \"Professional Plan - January 2024\", date: \"Jan 1, 2024\", amount: \"$99.00\", status: \"Paid\" },\n                    { description: \"Professional Plan - December 2023\", date: \"Dec 1, 2023\", amount: \"$99.00\", status: \"Paid\" },\n                  ].map((invoice, index) => (\n                    <div key={index} className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\" data-testid={`invoice-item-${index}`}>\n                      <div>\n                        <p className=\"font-medium text-foreground\">{invoice.description}</p>\n                        <p className=\"text-sm text-muted-foreground\">{invoice.date}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-foreground\">{invoice.amount}</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"secondary\">\n                            {invoice.status}\n                          </Badge>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-invoice-${index}`}>\n                            <i className=\"fas fa-download text-xs\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15076},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { UsageBar } from \"@/components/usage-bar\";\nimport { useLocation } from \"wouter\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  \n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const stats = (dashboardData as any)?.stats || {};\n  const usage = (dashboardData as any)?.usage || {};\n  const recentDocuments = (dashboardData as any)?.recentDocuments || [];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Dashboard</h1>\n              <p className=\"text-muted-foreground\">Welcome back! Here's your activity overview.</p>\n            </div>\n            <Button \n              onClick={() => setLocation('/upload')}\n              data-testid=\"button-upload\"\n              className=\"flex items-center space-x-2\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Upload Document</span>\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Documents</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-documents\">\n                      {stats?.totalDocuments || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-file-alt text-blue-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Pending Signatures</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pending-signatures\">\n                      {stats?.pendingSignatures || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-orange-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Completed</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-completed\">\n                      {stats?.completed || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Avg. Completion</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-avg-completion\">\n                      {stats?.avgCompletion || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-stopwatch text-purple-600 text-xl\"></i>\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">days to complete</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Usage Overview */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Usage This Month</CardTitle>\n                <span className=\"text-sm text-muted-foreground\">Professional Plan</span>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <UsageBar\n                label=\"Documents Processed\"\n                current={usage?.documents || 0}\n                limit={200}\n              />\n              <UsageBar\n                label=\"Envelopes Sent\"\n                current={usage?.envelopes || 0}\n                limit={500}\n              />\n              <UsageBar\n                label=\"AI Parsing Requests\"\n                current={usage?.aiRequests || 0}\n                limit={1000}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Recent Documents */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recent Documents</CardTitle>\n                <Button \n                  variant=\"ghost\" \n                  onClick={() => setLocation('/documents')}\n                  data-testid=\"button-view-all\"\n                >\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {recentDocuments && recentDocuments.length > 0 ? (\n                <div className=\"divide-y divide-border\">\n                  {recentDocuments.map((document: any, index: number) => (\n                    <div key={document.id || index} className=\"py-4 flex items-center justify-between\" data-testid={`document-item-${index}`}>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-file-pdf text-red-600\"></i>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\">{document.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {document.propertyAddress} • {document.propertyValue ? `$${document.propertyValue.toLocaleString()}` : 'No value'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <Badge variant={\n                          document.status === 'completed' ? 'default' :\n                          document.status === 'pending' ? 'secondary' : 'outline'\n                        }>\n                          {document.status === 'completed' ? 'Completed' :\n                           document.status === 'pending' ? 'Pending Signatures' : 'Processing'}\n                        </Badge>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {new Date(document.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No documents yet. Upload your first document to get started.</p>\n                  <Button \n                    onClick={() => setLocation('/upload')} \n                    className=\"mt-4\"\n                    data-testid=\"button-upload-first\"\n                  >\n                    Upload Document\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9104},"client/src/pages/documents.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { useLocation } from \"wouter\";\n\nexport default function Documents() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n\n  const { data: documents, isLoading } = useQuery({\n    queryKey: [\"/api/documents\"],\n  });\n\n  const filteredDocuments = Array.isArray(documents) ? documents.filter((doc: any) => {\n    const matchesSearch = doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         doc.propertyAddress?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = !statusFilter || statusFilter === 'all' || doc.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) : [];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Documents</h1>\n              <p className=\"text-muted-foreground\">Manage your real estate documents and track signing progress</p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search documents...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-status\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"processing\">Processing</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button \n                onClick={() => setLocation('/upload')}\n                data-testid=\"button-upload\"\n                className=\"flex items-center space-x-2\"\n              >\n                <i className=\"fas fa-plus\"></i>\n                <span>Upload</span>\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6\">\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"h-16 bg-muted rounded\"></div>\n                    ))}\n                  </div>\n                </div>\n              ) : filteredDocuments.length > 0 ? (\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 font-semibold text-foreground\">Document</th>\n                      <th className=\"text-left p-4 font-semibold text-foreground\">Property</th>\n                      <th className=\"text-left p-4 font-semibold text-foreground\">Status</th>\n                      <th className=\"text-left p-4 font-semibold text-foreground\">Date</th>\n                      <th className=\"text-left p-4 font-semibold text-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-border\">\n                    {filteredDocuments.map((document: any, index: number) => (\n                      <tr key={document.id} className=\"hover:bg-muted/25\" data-testid={`document-row-${index}`}>\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-red-100 rounded flex items-center justify-center\">\n                              <i className=\"fas fa-file-pdf text-red-600 text-sm\"></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-foreground\">{document.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{document.filename}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <p className=\"text-foreground\">{document.propertyAddress || 'N/A'}</p>\n                          {document.propertyValue && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              ${document.propertyValue.toLocaleString()}\n                            </p>\n                          )}\n                        </td>\n                        <td className=\"p-4\">\n                          <Badge variant={\n                            document.status === 'completed' ? 'default' :\n                            document.status === 'pending' ? 'secondary' : \n                            document.status === 'processing' ? 'outline' : 'destructive'\n                          }>\n                            {document.status === 'completed' ? 'Completed' :\n                             document.status === 'pending' ? 'Pending Signatures' :\n                             document.status === 'processing' ? 'Processing' : 'Failed'}\n                          </Badge>\n                        </td>\n                        <td className=\"p-4\">\n                          <p className=\"text-foreground\">{new Date(document.createdAt).toLocaleDateString()}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(document.createdAt).toLocaleTimeString()}\n                          </p>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${index}`}>\n                              <i className=\"fas fa-eye\"></i>\n                            </Button>\n                            {document.status === 'completed' ? (\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-${index}`}>\n                                <i className=\"fas fa-download\"></i>\n                              </Button>\n                            ) : (\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-send-${index}`}>\n                                <i className=\"fas fa-paper-plane\"></i>\n                              </Button>\n                            )}\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${index}`}>\n                              <i className=\"fas fa-ellipsis-h\"></i>\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-folder-open text-muted-foreground text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No documents found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchQuery || statusFilter ? 'Try adjusting your search criteria.' : 'Upload your first document to get started.'}\n                  </p>\n                  <Button \n                    onClick={() => setLocation('/upload')}\n                    data-testid=\"button-upload-first\"\n                  >\n                    Upload Document\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8927},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-secondary/5\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center space-x-3 mb-6\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-file-signature text-primary-foreground text-xl\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">DocuSign Pro</h1>\n              <p className=\"text-lg text-muted-foreground\">Real Estate Edition</p>\n            </div>\n          </div>\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">\n            Streamline Your Real Estate Document Workflow\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto mb-8\">\n            Upload, parse, and send real estate documents for e-signature with AI-powered automation. \n            Manage your entire document lifecycle from one professional platform.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-login\"\n            className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-4 text-lg\"\n          >\n            Get Started\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                <i className=\"fas fa-brain text-blue-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">AI Document Parsing</h3>\n              <p className=\"text-muted-foreground\">\n                Automatically extract property details, signers, and key terms from your real estate documents using advanced AI.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                <i className=\"fas fa-file-signature text-green-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">E-Signature Integration</h3>\n              <p className=\"text-muted-foreground\">\n                Send documents for signature through DocuSign with automated recipient management and status tracking.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                <i className=\"fas fa-chart-line text-purple-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Usage Analytics</h3>\n              <p className=\"text-muted-foreground\">\n                Track your document processing, signature completion rates, and manage subscription billing with detailed analytics.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center\">\n          <h3 className=\"text-2xl font-semibold mb-4\">Trusted by Real Estate Professionals</h3>\n          <p className=\"text-muted-foreground mb-8\">\n            Join thousands of agents, brokers, and real estate professionals who use DocuSign Pro to close deals faster.\n          </p>\n          <div className=\"flex items-center justify-center space-x-8 opacity-60\">\n            <span className=\"text-lg font-semibold\">Coldwell Banker</span>\n            <span className=\"text-lg font-semibold\">RE/MAX</span>\n            <span className=\"text-lg font-semibold\">Century 21</span>\n            <span className=\"text-lg font-semibold\">Keller Williams</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4170},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/recipients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertRecipientSchema } from \"@shared/schema\";\nimport type { Recipient } from \"@shared/schema\";\n\ntype RecipientFormData = {\n  name: string;\n  email: string;\n  phone?: string;\n  role: string;\n};\n\nexport default function Recipients() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingRecipient, setEditingRecipient] = useState<Recipient | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: recipients, isLoading } = useQuery({\n    queryKey: [\"/api/recipients\"],\n  });\n\n  const form = useForm<RecipientFormData>({\n    resolver: zodResolver(insertRecipientSchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      role: \"buyer\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: RecipientFormData) => {\n      return await apiRequest(\"POST\", \"/api/recipients\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contact created\",\n        description: \"New contact has been added successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipients\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create contact\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: RecipientFormData & { id: string }) => {\n      const { id, ...updateData } = data;\n      return await apiRequest(\"PUT\", `/api/recipients/${id}`, updateData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contact updated\",\n        description: \"Contact has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipients\"] });\n      setIsDialogOpen(false);\n      setEditingRecipient(null);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to update contact\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/recipients/${id}`, undefined);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contact deleted\",\n        description: \"Contact has been removed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipients\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to delete contact\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRecipients = (recipients as Recipient[] || [])?.filter((recipient: Recipient) =>\n    recipient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    recipient.email.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const onSubmit = (data: RecipientFormData) => {\n    if (editingRecipient) {\n      updateMutation.mutate({ ...data, id: editingRecipient.id });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (recipient: Recipient) => {\n    setEditingRecipient(recipient);\n    form.reset({\n      name: recipient.name,\n      email: recipient.email,\n      phone: recipient.phone || \"\",\n      role: recipient.role,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this contact?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const closeDialog = () => {\n    setIsDialogOpen(false);\n    setEditingRecipient(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Recipients</h1>\n              <p className=\"text-muted-foreground\">Manage your contacts for faster document processing</p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search contacts...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-contact\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Contact\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingRecipient ? 'Edit Contact' : 'Add New Contact'}\n                    </DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter full name\" data-testid=\"input-name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"Enter email address\" data-testid=\"input-email\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter phone number\" data-testid=\"input-phone\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"role\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Role</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-role\">\n                                  <SelectValue placeholder=\"Select role\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"buyer\">Buyer</SelectItem>\n                                <SelectItem value=\"seller\">Seller</SelectItem>\n                                <SelectItem value=\"agent\">Agent</SelectItem>\n                                <SelectItem value=\"witness\">Witness</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={closeDialog} data-testid=\"button-cancel\">\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createMutation.isPending || updateMutation.isPending}\n                          data-testid=\"button-save\"\n                        >\n                          {createMutation.isPending || updateMutation.isPending ? (\n                            <>\n                              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                              Saving...\n                            </>\n                          ) : (\n                            editingRecipient ? 'Update Contact' : 'Add Contact'\n                          )}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-48 bg-muted rounded-lg\"></div>\n                </div>\n              ))}\n            </div>\n          ) : filteredRecipients.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredRecipients.map((recipient: Recipient, index: number) => (\n                <Card key={recipient.id} data-testid={`card-recipient-${index}`}>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-user text-primary text-lg\"></i>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-foreground\">{recipient.name}</h3>\n                        <p className=\"text-sm text-muted-foreground capitalize\">{recipient.role}</p>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleDelete(recipient.id)}\n                        data-testid={`button-delete-${index}`}\n                      >\n                        <i className=\"fas fa-trash-alt text-muted-foreground\"></i>\n                      </Button>\n                    </div>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                        <i className=\"fas fa-envelope w-4\"></i>\n                        <span className=\"truncate\">{recipient.email}</span>\n                      </div>\n                      {recipient.phone && (\n                        <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                          <i className=\"fas fa-phone w-4\"></i>\n                          <span>{recipient.phone}</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                        <i className=\"fas fa-file-alt w-4\"></i>\n                        <span>{recipient.documentsSignedCount || 0} documents signed</span>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 pt-4 border-t border-border flex space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(recipient)}\n                        data-testid={`button-edit-${index}`}\n                      >\n                        Edit\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" data-testid={`button-send-document-${index}`}>\n                        Send Document\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-users text-muted-foreground text-2xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No contacts found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery ? 'Try adjusting your search criteria.' : 'Add your first contact to get started.'}\n              </p>\n              <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-contact\">\n                Add Contact\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14559},"client/src/pages/subscribe.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY ? \n  loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY) : \n  Promise.resolve(null);\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin + '/billing',\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: \"You are subscribed!\",\n      });\n      setLocation('/billing');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <div className=\"flex justify-end space-x-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={() => setLocation('/billing')} data-testid=\"button-cancel\">\n          Cancel\n        </Button>\n        <Button type=\"submit\" disabled={!stripe || !elements} data-testid=\"button-subscribe\">\n          Subscribe\n        </Button>\n      </div>\n    </form>\n  );\n};\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: string;\n  documentsLimit: number;\n  envelopesLimit: number;\n  aiRequestsLimit: number;\n  storageLimit: number;\n  features: string[];\n}\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [selectedPlan, setSelectedPlan] = useState(\"professional\");\n  const [isCreatingSubscription, setIsCreatingSubscription] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Fetch subscription plans from API\n  const { data: pricingPlans = [], isLoading: plansLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/subscription-plans\"],\n  });\n\n  // Handle missing Stripe configuration FIRST\n  if (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <Sidebar />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-destructive\">Stripe Not Configured</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Payment processing is not available. Please contact support to set up your subscription.\n              </p>\n              <Button variant=\"outline\" onClick={() => setLocation('/billing')}>\n                Back to Billing\n              </Button>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  const createSubscription = async () => {\n    if (!selectedPlan) return;\n    \n    setIsCreatingSubscription(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/get-or-create-subscription\", { planId: selectedPlan });\n      const data = await response.json();\n      setClientSecret(data.clientSecret);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to initialize subscription. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Subscription error:\", error);\n    } finally {\n      setIsCreatingSubscription(false);\n    }\n  };\n\n  if (plansLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <Sidebar />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-destructive\">Stripe Not Configured</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Payment processing is not available. Please contact support to set up your subscription.\n              </p>\n              <Button variant=\"outline\" onClick={() => setLocation('/billing')}>\n                Back to Billing\n              </Button>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  if (plansLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <Sidebar />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" aria-label=\"Loading\"/>\n            <p className=\"text-muted-foreground\">Loading subscription plans...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Subscribe</h1>\n              <p className=\"text-muted-foreground\">Choose the plan that's right for your business</p>\n            </div>\n            <Button variant=\"outline\" onClick={() => setLocation('/billing')} data-testid=\"button-back-to-billing\">\n              Back to Billing\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-8\">\n          {/* Pricing Plans */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            {pricingPlans.map((plan, index) => (\n              <Card \n                key={plan.id} \n                className={`relative cursor-pointer transition-all hover:shadow-lg ${\n                  selectedPlan === plan.id ? 'border-primary border-2 shadow-lg' : \n                  index === 1 ? 'border-primary border-2' : ''\n                }`}\n                onClick={() => setSelectedPlan(plan.id)}\n                data-testid={`card-plan-${plan.id}`}\n              >\n                {(index === 1 || selectedPlan === plan.id) && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-primary-foreground\">\n                      {selectedPlan === plan.id ? 'Selected' : 'Most Popular'}\n                    </Badge>\n                  </div>\n                )}\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-lg\">{plan.name}</CardTitle>\n                  <div className=\"mt-2\">\n                    <span className=\"text-3xl font-bold text-foreground\">${plan.price}</span>\n                    <span className=\"text-muted-foreground\">/month</span>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <ul className=\"space-y-3 text-sm\">\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>{plan.documentsLimit} documents/month</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>{plan.envelopesLimit} envelopes/month</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>{plan.aiRequestsLimit} AI requests/month</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>{plan.storageLimit} GB storage</span>\n                    </li>\n                    {(plan.features || []).map((feature: string, featureIndex: number) => (\n                      <li key={featureIndex} className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-check text-green-600\"></i>\n                        <span>{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className={`w-full ${selectedPlan === plan.id ? 'bg-primary text-primary-foreground' : ''}`}\n                    variant={selectedPlan === plan.id ? 'default' : 'outline'}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setSelectedPlan(plan.id);\n                    }}\n                    data-testid={`button-select-plan-${plan.id}`}\n                  >\n                    {selectedPlan === plan.id ? 'Selected' : 'Select Plan'}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Continue Button */}\n          <Card className=\"max-w-2xl mx-auto\">\n            <CardContent className=\"flex items-center justify-between p-6\">\n              <div>\n                <h4 className=\"font-medium\">Ready to subscribe?</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  You've selected the {pricingPlans.find(p => p.id === selectedPlan)?.name} plan\n                </p>\n              </div>\n              <Button \n                onClick={createSubscription}\n                disabled={isCreatingSubscription}\n                data-testid=\"button-continue-to-payment\"\n              >\n                {isCreatingSubscription ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Preparing...\n                  </>\n                ) : (\n                  'Continue to Payment'\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Payment Form */}\n          {clientSecret && selectedPlan && (\n            <Card className=\"max-w-2xl mx-auto\">\n              <CardHeader>\n                <CardTitle>Complete Your Subscription</CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Enter your payment information to activate your {pricingPlans.find(p => p.id === selectedPlan)?.name} plan\n                </p>\n              </CardHeader>\n              <CardContent>\n                {/* Selected Plan Summary */}\n                {(() => {\n                  const plan = pricingPlans.find(p => p.id === selectedPlan);\n                  return plan ? (\n                    <div className=\"bg-muted p-4 rounded-lg mb-6\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <h4 className=\"font-medium\">{plan.name} Plan</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {plan.documentsLimit} documents, {plan.envelopesLimit} envelopes, {plan.aiRequestsLimit} AI requests/month\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold\">${plan.price}</div>\n                          <div className=\"text-sm text-muted-foreground\">per month</div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : null;\n                })()}\n                \n                {/* Make SURE to wrap the form in <Elements> which provides the stripe context. */}\n                <Elements stripe={stripePromise} options={{ clientSecret }}>\n                  <SubscribeForm />\n                </Elements>\n              </CardContent>\n            </Card>\n          )}\n\n          {!clientSecret && selectedPlan && (\n            <Card className=\"max-w-2xl mx-auto\">\n              <CardContent className=\"flex items-center justify-center py-8\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Preparing your subscription...</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Features Summary */}\n          <Card className=\"max-w-4xl mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-center\">What You Get with DocuSign Pro</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n                <div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-brain text-blue-600 text-xl\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">AI Document Parsing</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically extract property details and signature fields from your documents\n                  </p>\n                </div>\n                <div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-file-signature text-green-600 text-xl\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">E-Signature Integration</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Send documents for signature with automated tracking and reminders\n                  </p>\n                </div>\n                <div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-chart-line text-purple-600 text-xl\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Usage Analytics</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Track performance and manage your subscription with detailed insights\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15128},"client/src/pages/upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { DocumentUpload } from \"@/components/document-upload\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst uploadSchema = z.object({\n  documentType: z.string().optional(),\n  propertyAddress: z.string().optional(),\n  emailSubject: z.string().min(1, \"Email subject is required\"),\n  emailMessage: z.string().optional(),\n  recipients: z.array(z.object({\n    name: z.string().min(1, \"Name is required\"),\n    email: z.string().email(\"Valid email is required\"),\n    phone: z.string().optional(),\n    role: z.string().min(1, \"Role is required\"),\n  })).min(1, \"At least one recipient is required\"),\n});\n\ntype UploadFormData = z.infer<typeof uploadSchema>;\n\nexport default function Upload() {\n  const [, setLocation] = useLocation();\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: recipients = [] } = useQuery({\n    queryKey: [\"/api/recipients\"],\n  });\n\n  const form = useForm<UploadFormData>({\n    resolver: zodResolver(uploadSchema),\n    defaultValues: {\n      emailSubject: \"\",\n      emailMessage: \"\",\n      recipients: [{ name: \"\", email: \"\", phone: \"\", role: \"buyer\" }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"recipients\",\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: UploadFormData & { file: File }) => {\n      const formData = new FormData();\n      formData.append('document', data.file);\n      formData.append('emailSubject', data.emailSubject);\n      formData.append('emailMessage', data.emailMessage || '');\n      formData.append('recipients', JSON.stringify(data.recipients));\n\n      return await apiRequest(\"POST\", \"/api/documents/upload\", formData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Document uploaded successfully\",\n        description: \"Your document is being processed and will be sent for signatures.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      setLocation('/documents');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UploadFormData) => {\n    if (!uploadedFile) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a PDF file to upload.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadMutation.mutate({ ...data, file: uploadedFile });\n  };\n\n  const addRecipientFromContacts = (recipient: any) => {\n    append({\n      name: recipient.name,\n      email: recipient.email,\n      phone: recipient.phone || \"\",\n      role: recipient.role,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Upload Document</h1>\n              <p className=\"text-muted-foreground\">Upload your real estate documents for processing and e-signature</p>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6 max-w-4xl mx-auto\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              {/* Upload Area */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Select Document</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <DocumentUpload\n                    onFileSelect={setUploadedFile}\n                    selectedFile={uploadedFile}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Document Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Document Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"documentType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Document Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-document-type\">\n                                <SelectValue placeholder=\"Auto-detect with AI\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"auto\">Auto-detect with AI</SelectItem>\n                              <SelectItem value=\"purchase_agreement\">Purchase Agreement</SelectItem>\n                              <SelectItem value=\"listing_agreement\">Listing Agreement</SelectItem>\n                              <SelectItem value=\"disclosure\">Disclosure Statement</SelectItem>\n                              <SelectItem value=\"addendum\">Addendum</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"propertyAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Property Address</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Will be extracted automatically\" \n                              data-testid=\"input-property-address\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"emailSubject\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Subject Line</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Please sign: [Document Name]\" \n                            data-testid=\"input-email-subject\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"emailMessage\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Message</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            rows={3} \n                            placeholder=\"Add a personal message to recipients...\"\n                            data-testid=\"textarea-email-message\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Recipients */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Recipients</CardTitle>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => append({ name: \"\", email: \"\", phone: \"\", role: \"buyer\" })}\n                      data-testid=\"button-add-recipient\"\n                    >\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Add Recipient\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Quick Add from Contacts */}\n                  {(recipients as any[] || []).length > 0 && (\n                    <div className=\"border border-border rounded-lg p-4\">\n                      <h4 className=\"font-medium mb-3\">Quick Add from Contacts</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\n                        {(recipients as any[] || []).slice(0, 6).map((recipient: any) => (\n                          <Button\n                            key={recipient.id}\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => addRecipientFromContacts(recipient)}\n                            className=\"justify-start\"\n                            data-testid={`button-add-contact-${recipient.id}`}\n                          >\n                            <i className=\"fas fa-plus w-4 h-4 mr-2\"></i>\n                            {recipient.name}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Manual Recipients */}\n                  {fields.map((field, index) => (\n                    <div key={field.id} className=\"border border-border rounded-lg p-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name={`recipients.${index}.name`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Name</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Full Name\" \n                                  data-testid={`input-recipient-name-${index}`}\n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name={`recipients.${index}.email`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"email\" \n                                  placeholder=\"email@example.com\" \n                                  data-testid={`input-recipient-email-${index}`}\n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name={`recipients.${index}.role`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Role</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid={`select-recipient-role-${index}`}>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"buyer\">Buyer</SelectItem>\n                                  <SelectItem value=\"seller\">Seller</SelectItem>\n                                  <SelectItem value=\"agent\">Agent</SelectItem>\n                                  <SelectItem value=\"witness\">Witness</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex items-end\">\n                          {fields.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => remove(index)}\n                              data-testid={`button-remove-recipient-${index}`}\n                            >\n                              <i className=\"fas fa-trash-alt\"></i>\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end space-x-4\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/documents')}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={uploadMutation.isPending || !uploadedFile}\n                  data-testid=\"button-process-document\"\n                >\n                  {uploadMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Processing...\n                    </>\n                  ) : (\n                    'Process Document'\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15501},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface NavItem {\n  id: string;\n  label: string;\n  icon: string;\n  path: string;\n}\n\nconst navItems: NavItem[] = [\n  { id: \"dashboard\", label: \"Dashboard\", icon: \"fas fa-tachometer-alt\", path: \"/\" },\n  { id: \"documents\", label: \"Documents\", icon: \"fas fa-folder-open\", path: \"/documents\" },\n  { id: \"upload\", label: \"Upload\", icon: \"fas fa-cloud-upload-alt\", path: \"/upload\" },\n  { id: \"recipients\", label: \"Recipients\", icon: \"fas fa-users\", path: \"/recipients\" },\n  { id: \"billing\", label: \"Billing\", icon: \"fas fa-credit-card\", path: \"/billing\" },\n];\n\nexport function Sidebar() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-file-signature text-primary-foreground text-lg\"></i>\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">DocuSign Pro</h1>\n            <p className=\"text-sm text-muted-foreground\">Real Estate Edition</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item) => (\n          <button\n            key={item.id}\n            onClick={() => setLocation(item.path)}\n            className={`w-full flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n              isActive(item.path)\n                ? \"bg-secondary text-secondary-foreground\"\n                : \"text-muted-foreground hover:bg-secondary hover:text-secondary-foreground\"\n            }`}\n            data-testid={`nav-${item.id}`}\n          >\n            <i className={`${item.icon} w-5`}></i>\n            <span>{item.label}</span>\n          </button>\n        ))}\n      </nav>\n      \n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          {(user as any)?.profileImageUrl ? (\n            <img \n              src={(user as any).profileImageUrl} \n              alt=\"Profile\" \n              className=\"w-10 h-10 rounded-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-user text-primary\"></i>\n            </div>\n          )}\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-user-name\">\n              {(user as any)?.firstName && (user as any)?.lastName \n                ? `${(user as any).firstName} ${(user as any).lastName}`\n                : (user as any)?.email || 'User'\n              }\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\">\n              Real Estate Professional\n            </p>\n          </div>\n        </div>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={handleLogout}\n          className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n          data-testid=\"button-sign-out\"\n        >\n          <i className=\"fas fa-sign-out-alt mr-2\"></i>\n          Sign Out\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3784},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"api/index.ts":{"content":"import { registerRoutes } from '../server/routes';\nimport express from 'express';\n\nconst app = express();\n\n// Initialize routes once\nlet isInitialized = false;\n\nexport default async function handler(req: any, res: any) {\n  if (!isInitialized) {\n    await registerRoutes(app);\n    isInitialized = true;\n  }\n  \n  return app(req, res);\n}","size_bytes":334},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { apiRequest } from './queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check authentication status on mount\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const response = await fetch('/api/auth/user', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n\n    const data = await response.json();\n    setUser(data.user);\n  };\n\n  const logout = async () => {\n    await fetch('/api/auth/logout', {\n      method: 'POST',\n      credentials: 'include',\n    });\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2069},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/lib/auth';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [email, setEmail] = useState('demo@example.com');\n  const [password, setPassword] = useState('demo123');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      setLocation('/');\n      toast({\n        title: 'Login Successful',\n        description: 'Welcome to DocuSign Pro!',\n      });\n    } catch (error) {\n      toast({\n        title: 'Login Failed',\n        description: 'Please check your credentials and try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-primary rounded-xl flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-file-signature text-2xl text-primary-foreground\"></i>\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl\">Welcome to DocuSign Pro</CardTitle>\n            <p className=\"text-muted-foreground mt-2\">\n              AI-powered document processing for real estate professionals\n            </p>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Signing in...\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <p className=\"text-sm font-medium mb-2\">Demo Credentials:</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Email: <code>demo@example.com</code><br />\n              Password: <code>demo123</code>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3668},"server/auth.ts":{"content":"import passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { storage } from \"./storage\";\n\n// Environment-aware session configuration for Vercel\nconst getSessionStore = () => {\n  if (process.env.DATABASE_URL) {\n    // Use database store when available (PostgreSQL)\n    const connectPg = require(\"connect-pg-simple\");\n    const pgSession = connectPg(session);\n    return new pgSession({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    });\n  } else {\n    // Fallback to memory store (not recommended for production)\n    return new session.MemoryStore();\n  }\n};\n\nexport async function setupAuth(app: Express): Promise<void> {\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    store: getSessionStore(),\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Passport serialization\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  // Mock authentication strategy for development/demo\n  // In production, replace with proper OAuth, SAML, or other auth providers\n  passport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password'\n  }, async (email: string, password: string, done) => {\n    try {\n      // Mock authentication - in production, verify credentials properly\n      // For demo purposes, create/get user based on email\n      const userId = `demo_${email.replace(/[^a-zA-Z0-9]/g, '_')}`;\n      const newUser = {\n        id: userId,\n        email,\n        firstName: 'Demo',\n        lastName: 'User',\n      };\n      await storage.upsertUser(newUser);\n      const user = await storage.getUser(userId);\n      \n      return done(null, user);\n    } catch (error) {\n      return done(error);\n    }\n  }));\n\n  // Auth routes\n  app.post('/api/auth/login', passport.authenticate('local'), (req: any, res) => {\n    res.json({ \n      success: true, \n      user: {\n        id: req.user.id,\n        email: req.user.email,\n        firstName: req.user.firstName,\n        lastName: req.user.lastName,\n      }\n    });\n  });\n\n  app.post('/api/auth/logout', (req: any, res) => {\n    req.logout((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: 'Logout failed' });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get('/api/auth/user', (req: any, res) => {\n    if (req.isAuthenticated()) {\n      res.json({\n        user: {\n          id: req.user.id,\n          email: req.user.email,\n          firstName: req.user.firstName,\n          lastName: req.user.lastName,\n        }\n      });\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  });\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = (req: any, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Authentication required\" });\n};","size_bytes":3419},"README.md":{"content":"# Real Estate DocuSign SaaS Platform\n\nAn AI-powered document processing and e-signature platform designed for real estate professionals.\n\n## Features\n\n- **AI Document Parsing**: Automatically extract property details and signature fields\n- **Subscription Billing**: Tiered pricing with usage tracking and enforcement\n- **Email Notifications**: Automated status updates, reminders, and usage alerts\n- **E-Signature Integration**: DocuSign API integration for professional workflows\n- **Usage Analytics**: Comprehensive tracking and reporting\n- **Real Estate Focused**: Purpose-built for real estate document workflows\n\n## Deployment on Vercel\n\nThis project is configured for deployment on Vercel with serverless functions.\n\n### Environment Variables\n\nSet the following environment variables in your Vercel dashboard:\n\n```bash\n# Database\nDATABASE_URL=your_postgresql_connection_string\n\n# Authentication\nSESSION_SECRET=your_session_secret\n\n# AI & Email Services\nOPENAI_API_KEY=your_openai_api_key\nSENDGRID_API_KEY=your_sendgrid_api_key\n\n# Stripe (Payment Processing)\nSTRIPE_SECRET_KEY=your_stripe_secret_key\nVITE_STRIPE_PUBLIC_KEY=your_stripe_publishable_key\n\n# DocuSign (Optional)\nDOCUSIGN_INTEGRATION_KEY=your_docusign_integration_key\nDOCUSIGN_USER_ID=your_docusign_user_id\nDOCUSIGN_ACCOUNT_ID=your_docusign_account_id\nDOCUSIGN_BASE_PATH=https://demo.docusign.net/restapi\nDOCUSIGN_PRIVATE_KEY=your_docusign_private_key\n```\n\n### Deployment Steps\n\n1. **Connect Repository**: Connect your GitHub repository to Vercel\n2. **Configure Build**: Vercel should auto-detect the Next.js configuration\n3. **Set Environment Variables**: Add all required environment variables\n4. **Deploy**: Push to your main branch to trigger deployment\n5. **Database Setup**: Run database migrations after first deployment:\n   ```bash\n   npm run db:push\n   ```\n\n### Local Development\n\n1. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n2. **Set Environment Variables**: Create a `.env` file with the required variables\n\n3. **Start Development Server**:\n   ```bash\n   npm run dev\n   ```\n\n4. **Access Application**: Open http://localhost:5000\n\n### Authentication\n\nThe application uses a demo authentication system for development. In production, replace with your preferred authentication provider (Auth0, Firebase Auth, etc.).\n\n**Demo Credentials:**\n- Email: `demo@example.com`\n- Password: `demo123`\n\n### Architecture\n\n- **Frontend**: React + TypeScript + Tailwind CSS + shadcn/ui\n- **Backend**: Express.js with serverless functions\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Session-based with Passport.js\n- **Payments**: Stripe subscriptions\n- **AI**: OpenAI GPT for document parsing\n- **Email**: SendGrid for notifications\n\n### Support\n\nFor deployment issues or questions, refer to the Vercel documentation or contact support.","size_bytes":2834}},"version":1}